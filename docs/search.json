[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "My final project will look at Airbnbs for the city of Kauai, Hawaii, an island known to be the most beautiful island in the popular tropical destination. It can be difficult for a traveller to determine where to stay and what pricing is reasonable in a new destination. The project aims to provide useful insights on the available Airbnb listings on that island and a price predictive model for a potential visitor to the city in order to make a better informed decision on her choice of accommodation.\nThe datasets will come from Inside Airbnb, a free website that provides quarterly Airbnb listing data, and Foursquare API, which provides venue information globally. For the Airbnb data, 1 year worth of scraped data is utilized. The site provides detailed listings, calendar, and review data, with a geojson file of the neighbourhoods in the city to create mapping visualizations. Foursquare API was also used to have a more robust understanding of what number and type of venues were within each neighbourhood, and its relationship to price.\nInteractive visualizations and a machine learning algorithm are provided for the potential traveller to utilize and determine where to stay in Kauai."
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Altair and Hvplot Charts",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive charts produced using Altair and hvPlot."
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in Altair",
    "text": "Example: Measles Incidence in Altair\nFirst, let’s load the data for measles incidence in wide format:\n\n\nCode\nurl = \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/measles_incidence.csv\"\ndata = pd.read_csv(url, skiprows=2, na_values=\"-\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nWEEK\nALABAMA\nALASKA\nARIZONA\nARKANSAS\nCALIFORNIA\nCOLORADO\nCONNECTICUT\nDELAWARE\n...\nSOUTH DAKOTA\nTENNESSEE\nTEXAS\nUTAH\nVERMONT\nVIRGINIA\nWASHINGTON\nWEST VIRGINIA\nWISCONSIN\nWYOMING\n\n\n\n\n0\n1928\n1\n3.67\nNaN\n1.90\n4.11\n1.38\n8.38\n4.50\n8.58\n...\n5.69\n22.03\n1.18\n0.4\n0.28\nNaN\n14.83\n3.36\n1.54\n0.91\n\n\n1\n1928\n2\n6.25\nNaN\n6.40\n9.91\n1.80\n6.02\n9.00\n7.30\n...\n6.57\n16.96\n0.63\nNaN\n0.56\nNaN\n17.34\n4.19\n0.96\nNaN\n\n\n2\n1928\n3\n7.95\nNaN\n4.50\n11.15\n1.31\n2.86\n8.81\n15.88\n...\n2.04\n24.66\n0.62\n0.2\n1.12\nNaN\n15.67\n4.19\n4.79\n1.36\n\n\n3\n1928\n4\n12.58\nNaN\n1.90\n13.75\n1.87\n13.71\n10.40\n4.29\n...\n2.19\n18.86\n0.37\n0.2\n6.70\nNaN\n12.77\n4.66\n1.64\n3.64\n\n\n4\n1928\n5\n8.03\nNaN\n0.47\n20.79\n2.38\n5.13\n16.80\n5.58\n...\n3.94\n20.05\n1.57\n0.4\n6.70\nNaN\n18.83\n7.37\n2.91\n0.91\n\n\n\n\n5 rows × 53 columns\n\n\n\nThen, use the pandas.melt() function to convert it to tidy format:\n\n\nCode\nannual = data.drop(\"WEEK\", axis=1)\nmeasles = annual.groupby(\"YEAR\").sum().reset_index()\nmeasles = measles.melt(id_vars=\"YEAR\", var_name=\"state\", value_name=\"incidence\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nstate\nincidence\n\n\n\n\n0\n1928\nALABAMA\n334.99\n\n\n1\n1929\nALABAMA\n111.93\n\n\n2\n1930\nALABAMA\n157.00\n\n\n3\n1931\nALABAMA\n337.29\n\n\n4\n1932\nALABAMA\n10.21\n\n\n\n\n\n\n\nFinally, load altair:\n\nimport altair as alt\n\nAnd generate our final data viz:\n\n# use a custom color map\ncolormap = alt.Scale(\n    domain=[0, 100, 200, 300, 1000, 3000],\n    range=[\n        \"#F0F8FF\",\n        \"cornflowerblue\",\n        \"mediumseagreen\",\n        \"#FFEE00\",\n        \"darkorange\",\n        \"firebrick\",\n    ],\n    type=\"sqrt\",\n)\n\n# Vertical line for vaccination year\nthreshold = pd.DataFrame([{\"threshold\": 1963}])\n\n# plot YEAR vs state, colored by incidence\nchart = (\n    alt.Chart(measles)\n    .mark_rect()\n    .encode(\n        x=alt.X(\"YEAR:O\", axis=alt.Axis(title=None, ticks=False)),\n        y=alt.Y(\"state:N\", axis=alt.Axis(title=None, ticks=False)),\n        color=alt.Color(\"incidence:Q\", sort=\"ascending\", scale=colormap, legend=None),\n        tooltip=[\"state\", \"YEAR\", \"incidence\"],\n    )\n    .properties(width=650, height=500)\n)\n\nrule = alt.Chart(threshold).mark_rule(strokeWidth=4).encode(x=\"threshold:O\")\n\nout = chart + rule\nout"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in hvplot",
    "text": "Example: Measles Incidence in hvplot\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate the same data viz in hvplot:\n\n# Make the heatmap with hvplot\nheatmap = measles.hvplot.heatmap(\n    x=\"YEAR\",\n    y=\"state\",\n    C=\"incidence\", # color each square by the incidence\n    reduce_function=np.sum, # sum the incidence for each state/year\n    frame_height=450,\n    frame_width=600,\n    flip_yaxis=True,\n    rot=90,\n    colorbar=False,\n    cmap=\"viridis\",\n    xlabel=\"\",\n    ylabel=\"\",\n)\n\n# Some additional formatting using holoviews \n# For more info: http://holoviews.org/user_guide/Customizing_Plots.html\nheatmap = heatmap.redim(state=\"State\", YEAR=\"Year\")\nheatmap = heatmap.opts(fontsize={\"xticks\": 0, \"yticks\": 6}, toolbar=\"above\")\nheatmap"
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nMy final project will look at Airbnbs for the city of Kauai, Hawaii, an island known to be the most beautiful island in the popular tropical destination. It can be difficult for a traveller to determine where to stay and what pricing is reasonable in a new destination. The project aims to provide useful insights on the available Airbnb listings on that island and a price predictive model for a potential visitor to the city in order to make a better informed decision on her choice of accommodation.\nThe datasets will come from Inside Airbnb, a free website that provides quarterly Airbnb listing data, and Foursquare API, which provides venue information globally. For the Airbnb data, 1 year worth of scraped data is utilized. The site provides detailed listings, calendar, and review data, with a geojson file of the neighbourhoods in the city to create mapping visualizations. Foursquare API was also used to have a more robust understanding of what number and type of venues were within each neighbourhood, and its relationship to price.\nInteractive visualizations and a machine learning algorithm are provided for the potential traveller to utilize and determine where to stay in Kauai."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007"
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 550 Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. It’s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, you’re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550 Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. It’s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, you’re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#find-out-more",
    "href": "index.html#find-out-more",
    "title": "MUSA 550 Final Project Template",
    "section": "Find out more",
    "text": "Find out more\nThe code for this repository is hosted on our course’s GitHub page: https://github.com/MUSA-550-Fall-2023/quarto-website-template.\nWe covered the basics of getting started with Quarto and GitHub Pages in week 9. Take a look at the slides for lecture 9A to find out more."
  },
  {
    "objectID": "final-project-draft.html",
    "href": "final-project-draft.html",
    "title": "1. Explore Airbnb Data",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport hvplot.pandas\n\nnp.random.seed(42)\n\n# Show all columns\npd.options.display.max_columns = 999\n\n# APIs\nimport requests"
  },
  {
    "objectID": "final-project-draft.html#explore-airbnb-data",
    "href": "final-project-draft.html#explore-airbnb-data",
    "title": "Final Project",
    "section": "1. Explore Airbnb Data",
    "text": "1. Explore Airbnb Data\n\n1.1 Load Data\nWe load in 3 datasets that provide the relevant airbnb listings data. - 1. Neighbourhoods: the shape file of Hawaii’s neighbourhoods - 2. Listings: listings scraped from September 2023 - 3. Calendar: price per listing per each of the 365 days from scraped date\n\n1.1.1 Neighbourhoods\nThe neighbourhoods are grouped by the Hawaii islands, and each island has neighbourhoods within.\n\n# Neighbourhoods\nnh = gpd.read_file(\"./data/neighbourhoods.geojson\")\nnh #ESPG 4326\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\ngeometry\n\n\n\n\n0\nKoolauloa\nHonolulu\nMULTIPOLYGON (((-158.00347 21.69941, -158.0028...\n\n\n1\nNorth Shore Oahu\nHonolulu\nMULTIPOLYGON (((-158.02224 21.69103, -158.0219...\n\n\n2\nWaianae\nHonolulu\nMULTIPOLYGON (((-158.26744 21.57220, -158.2673...\n\n\n3\nKoolaupoko\nHonolulu\nMULTIPOLYGON (((-157.83830 21.53446, -157.8381...\n\n\n4\nCentral Oahu\nHonolulu\nMULTIPOLYGON (((-157.92108 21.53219, -157.9209...\n\n\n5\nNorth Shore Kauai\nKauai\nMULTIPOLYGON (((-159.40448 22.22918, -159.4044...\n\n\n6\nKapaa-Wailua\nKauai\nMULTIPOLYGON (((-159.33158 22.19300, -159.3313...\n\n\n7\nWaimea-Kekaha\nKauai\nMULTIPOLYGON (((-159.69701 22.16169, -159.6970...\n\n\n8\nLihue\nKauai\nMULTIPOLYGON (((-159.45149 22.06189, -159.4476...\n\n\n9\nHanapepe-Eleele\nKauai\nMULTIPOLYGON (((-159.50306 22.05268, -159.4991...\n\n\n10\nKoloa-Poipu\nKauai\nMULTIPOLYGON (((-159.49322 21.97766, -159.4922...\n\n\n11\nMolokai\nMaui\nMULTIPOLYGON (((-157.19720 21.21427, -157.1969...\n\n\n12\nLahaina\nMaui\nMULTIPOLYGON (((-156.62697 21.02254, -156.6265...\n\n\n13\nWailuku-Kahului\nMaui\nMULTIPOLYGON (((-156.58237 21.01779, -156.5821...\n\n\n14\nPaia-Haiku\nMaui\nMULTIPOLYGON (((-156.32796 20.94421, -156.3278...\n\n\n15\nLanai\nMaui\nMULTIPOLYGON (((-156.98807 20.92921, -156.9880...\n\n\n16\nHana\nMaui\nMULTIPOLYGON (((-156.19115 20.88776, -156.1909...\n\n\n17\nKihei-Makena\nMaui\nMULTIPOLYGON (((-156.55399 20.83973, -156.5515...\n\n\n18\nKahoolawe\nMaui\nMULTIPOLYGON (((-156.57218 20.60308, -156.5721...\n\n\n19\nHamakua\nHawaii\nMULTIPOLYGON (((-155.69984 20.18567, -155.6994...\n\n\n20\nSouth Kohala\nHawaii\nMULTIPOLYGON (((-155.70545 20.11025, -155.6994...\n\n\n21\nNorth Hilo\nHawaii\nMULTIPOLYGON (((-155.28469 20.01916, -155.2845...\n\n\n22\nSouth Hilo\nHawaii\nMULTIPOLYGON (((-155.12853 19.90004, -155.1283...\n\n\n23\nNorth Kona\nHawaii\nMULTIPOLYGON (((-155.88483 19.91049, -155.8837...\n\n\n24\nNorth Kohala\nHawaii\nMULTIPOLYGON (((-155.87222 20.26316, -155.8719...\n\n\n25\nPuna\nHawaii\nMULTIPOLYGON (((-154.99055 19.71630, -154.9904...\n\n\n26\nKau\nHawaii\nMULTIPOLYGON (((-155.35286 19.58976, -155.3524...\n\n\n27\nSouth Kona\nHawaii\nMULTIPOLYGON (((-155.95546 19.51061, -155.9551...\n\n\n28\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.87518 21.45657, -157.8749...\n\n\n29\nEwa\nHonolulu\nMULTIPOLYGON (((-158.04696 21.41613, -158.0436...\n\n\n30\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.88030 21.31254, -157.8803...\n\n\n31\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.96070 21.36958, -157.9608...\n\n\n32\nEast Honolulu\nHonolulu\nMULTIPOLYGON (((-157.65279 21.30893, -157.6527...\n\n\n33\nMakawao-Pukalani-Kula\nMaui\nMULTIPOLYGON (((-156.40127 20.82874, -156.3978...\n\n\n\n\n\n\n\n\n\n1.1.2 Airbnb listings in Hawaii\nWe load in the listings data that was scraped from airbnb in September 2023. It includes all relevant listings and its associated details, such as host rating, property and property rating, posted available from scraped date to a year out (365 days out). This will be our main data source file.\n\n# Listings\nlistings = pd.read_csv(\"./data/listings_sep_23.csv.gz\")\n\nDue to our future API usage, we want to limit the number of listings to analyze for the project. This scope of this analysis will be contained to one island - the island of Kauai, known to be the prettiest island of Hawaii. In order to make sure we have enough data, we group the listings per the island. It looks like there are 5364 listings for Kauai.\n\n# Listings per neighbourhood\nnh_grp = listings.groupby(\"neighbourhood_group_cleansed\").size()\nnh_grp # I will analyze neighbourhood group Kauai: 5374 listings\n\nneighbourhood_group_cleansed\nHawaii       8223\nHonolulu     9573\nKauai        5374\nMaui        10169\ndtype: int64\n\n\nWe subset the listings data for the airbnb properties located in Kauai.\n\n# Subset listings for the island of Kauai\nlistings_kauai = listings.loc[listings[\"neighbourhood_group_cleansed\"] == \"Kauai\"].reset_index(drop=True)\nlistings_kauai\n\n\n\n\n\n\n\n\nid\nlisting_url\nscrape_id\nlast_scraped\nsource\nname\ndescription\nneighborhood_overview\npicture_url\nhost_id\nhost_url\nhost_name\nhost_since\nhost_location\nhost_about\nhost_response_time\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_thumbnail_url\nhost_picture_url\nhost_neighbourhood\nhost_listings_count\nhost_total_listings_count\nhost_verifications\nhost_has_profile_pic\nhost_identity_verified\nneighbourhood\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms\nbathrooms_text\nbedrooms\nbeds\namenities\nprice\nminimum_nights\nmaximum_nights\nminimum_minimum_nights\nmaximum_minimum_nights\nminimum_maximum_nights\nmaximum_maximum_nights\nminimum_nights_avg_ntm\nmaximum_nights_avg_ntm\ncalendar_updated\nhas_availability\navailability_30\navailability_60\navailability_90\navailability_365\ncalendar_last_scraped\nnumber_of_reviews\nnumber_of_reviews_ltm\nnumber_of_reviews_l30d\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreview_scores_value\nlicense\ninstant_bookable\ncalculated_host_listings_count\ncalculated_host_listings_count_entire_homes\ncalculated_host_listings_count_private_rooms\ncalculated_host_listings_count_shared_rooms\nreviews_per_month\n\n\n\n\n0\n152645\nhttps://www.airbnb.com/rooms/152645\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.54 · 1 bedroom · 1 b...\nOur Studio has ceramic tiled floors and a larg...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nNaN\nNorth Shore Kauai\nKauai\n22.220420\n-159.477540\nEntire condo\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"F...\n$110.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n1\n7\n14\n133\n2023-09-10\n206\n16\n1\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n4.69\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n1.40\n\n\n1\n153304\nhttps://www.airbnb.com/rooms/153304\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.64 · 2 bedrooms · 2 ...\nThe condo has ceramic tile flooring throughout...\nSandpiper Village is centrally located within ...\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nPrinceville, Hawaii, United States\nNorth Shore Kauai\nKauai\n22.222660\n-159.478040\nEntire condo\nEntire home/apt\n6\nNaN\n2 baths\n2.0\n2.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"F...\n$195.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n5\n8\n13\n136\n2023-09-10\n142\n15\n1\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n4.69\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n0.96\n\n\n2\n153397\nhttps://www.airbnb.com/rooms/153397\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.74 · 3 bedrooms · 4 ...\n3 BDRM 3 Bath w/ Queen Airbed- Sleeps 8 - Tile...\nNaN\nhttps://a0.muscache.com/pictures/969894/71ff7f...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nNaN\nNorth Shore Kauai\nKauai\n22.220970\n-159.478040\nEntire condo\nEntire home/apt\n8\nNaN\n3 baths\n3.0\n4.0\n[\"Hair dryer\", \"Hot water\", \"Pantene shampoo\",...\n$285.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n0\n0\n3\n81\n2023-09-10\n20\n2\n0\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n4.79\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n0.15\n\n\n3\n162600\nhttps://www.airbnb.com/rooms/162600\n20230910055919\n2023-09-11\ncity scrape\nCondo in Kapaa · ★4.95 · 2 bedrooms · 3 beds ·...\nAt the forefront of East Shore accommodation i...\nNaN\nhttps://a0.muscache.com/pictures/prohost-api/H...\n756093\nhttps://www.airbnb.com/users/show/756093\nKaua’i\n2011-06-28\nHawaii, United States\nKauai Exclusive Management. A locally owned an...\nwithin an hour\n99%\n96%\nt\nhttps://a0.muscache.com/im/pictures/user/6dec4...\nhttps://a0.muscache.com/im/pictures/user/6dec4...\nKauaʻi\n75.0\n132.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.061740\n-159.320520\nEntire condo\nEntire home/apt\n6\nNaN\n2.5 baths\n2.0\n3.0\n[\"Refrigerator\", \"Hair dryer\", \"BBQ grill\", \"H...\n$588.00\n1\n1125\n3\n3\n1125\n1125\n3.0\n1125.0\nNaN\nt\n3\n4\n27\n112\n2023-09-11\n20\n1\n0\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n4.75\n430080010022\nf\n75\n75\n0\n0\n0.19\n\n\n4\n13238\nhttps://www.airbnb.com/rooms/13238\n20230910055919\n2023-09-11\ncity scrape\nCondo in Princeville · ★4.48 · Studio · 1 bed ...\nOur place is in the Princeville Resort facing ...\nLocated in Princeville Resort. Beautiful Homes...\nhttps://a0.muscache.com/pictures/29269565/35ca...\n51647\nhttps://www.airbnb.com/users/show/51647\nAnnie/Greg\n2009-11-05\nNaN\nAnnie and Greg Fry from Encinitas. We like to...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/51647/profile...\nhttps://a0.muscache.com/im/users/51647/profile...\nKauaʻi\n2.0\n3.0\n['email', 'phone']\nt\nf\nPrinceville, Hawaii, United States\nNorth Shore Kauai\nKauai\n22.217890\n-159.471840\nEntire condo\nEntire home/apt\n2\nNaN\n1 bath\nNaN\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"S...\n$169.00\n3\n1125\n3\n3\n1125\n1125\n3.0\n1125.0\nNaN\nt\n7\n14\n30\n276\n2023-09-11\n166\n17\n0\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n4.52\n540050030025, TA-095-127-9616-01\nt\n2\n2\n0\n0\n1.50\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5369\n974058647912716646\nhttps://www.airbnb.com/rooms/974058647912716646\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Lihue · ★New · 1 bedroom · 1 be...\nRevel in the magical view from this East Side ...\nGreat Central East Side Island Location, 3 mil...\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n65379678\nhttps://www.airbnb.com/users/show/65379678\nJennifer\n2016-04-01\nKapaʻa, HI\nExcited to meet you ! I am a Kaua'i enthusias...\nwithin an hour\n100%\n100%\nt\nhttps://a0.muscache.com/im/pictures/user/6f8eb...\nhttps://a0.muscache.com/im/pictures/user/6f8eb...\nNawiliwili\n9.0\n14.0\n['email', 'phone']\nt\nt\nLihue, Hawaii, United States\nLihue\nKauai\n22.009110\n-159.338350\nEntire rental unit\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"C...\n$185.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n12\n25\n52\n228\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n370030150166, TA-159-050-5472-00\nf\n9\n7\n2\n0\nNaN\n\n\n5370\n974181213482059205\nhttps://www.airbnb.com/rooms/974181213482059205\n20230910055919\n2023-09-10\ncity scrape\nCamper/RV in Anahola · ★New · 1 bedroom · 1 be...\n⭐️⭐️⭐️⭐️⭐️&lt;br /&gt;All Star Host Since 2017 &lt;br /...\nKOA Campers Kauai&lt;br /&gt;Is located near two cam...\nhttps://a0.muscache.com/pictures/hosting/Hosti...\n485051667\nhttps://www.airbnb.com/users/show/485051667\nKoa\n2022-10-25\nNaN\nNaN\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/pictures/user/User-...\nhttps://a0.muscache.com/im/pictures/user/User-...\nNaN\n2.0\n4.0\n['phone']\nt\nt\nAnahola, Hawaii, United States\nKapaa-Wailua\nKauai\n22.157706\n-159.317440\nCamper/RV\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Outdoor dining area\", \"First aid kit\", \"Beac...\n$153.00\n4\n9\n4\n4\n1125\n1125\n4.0\n1125.0\nNaN\nt\n15\n45\n75\n255\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n360020170000, TA-137-306-2656-01\nt\n2\n2\n0\n0\nNaN\n\n\n5371\n975125508230452492\nhttps://www.airbnb.com/rooms/975125508230452492\n20230910055919\n2023-09-11\ncity scrape\nCabin in Kapaʻa · ★New · 2 bedrooms · 2 beds ·...\nSuper rare find! A perfect 2 in 1 experience l...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n239397319\nhttps://www.airbnb.com/users/show/239397319\nNick\n2019-01-27\nKapaʻa, HI\nAfter exploring Kauai and the Big Island via O...\nwithin an hour\n100%\n100%\nt\nhttps://a0.muscache.com/im/pictures/user/60760...\nhttps://a0.muscache.com/im/pictures/user/60760...\nNaN\n10.0\n25.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.053770\n-159.328740\nEntire cabin\nEntire home/apt\n5\nNaN\nHalf-bath\n2.0\n2.0\n[\"First aid kit\", \"BBQ grill\", \"Valley view\", ...\n$214.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n23\n53\n83\n355\n2023-09-11\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n430020100084, TA-117-707-1616-02\nt\n9\n9\n0\n0\nNaN\n\n\n5372\n975283100809274999\nhttps://www.airbnb.com/rooms/975283100809274999\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Kapaʻa · ★New · 2 bedrooms · 4 ...\nThis spacious two-bedroom resort suite measure...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n371942068\nhttps://www.airbnb.com/users/show/371942068\nJoy\n2020-10-14\nNaN\nHi, I'm Joy! I'm excited for you to check out ...\nwithin a few hours\n100%\n44%\nt\nhttps://a0.muscache.com/im/pictures/user/d2890...\nhttps://a0.muscache.com/im/pictures/user/d2890...\nOrmond Shores\n346.0\n583.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.051842\n-159.334251\nEntire rental unit\nEntire home/apt\n6\nNaN\n2 baths\n2.0\n4.0\n[\"Refrigerator\", \"First aid kit\", \"Carbon mono...\n$399.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n29\n59\n89\n364\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nExempt\nf\n97\n85\n12\n0\nNaN\n\n\n5373\n975288623054648385\nhttps://www.airbnb.com/rooms/975288623054648385\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Kapaʻa · ★New · 1 bedroom · 2 b...\nThis spacious one-bedroom resort suite measure...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n371942068\nhttps://www.airbnb.com/users/show/371942068\nJoy\n2020-10-14\nNaN\nHi, I'm Joy! I'm excited for you to check out ...\nwithin a few hours\n100%\n44%\nt\nhttps://a0.muscache.com/im/pictures/user/d2890...\nhttps://a0.muscache.com/im/pictures/user/d2890...\nOrmond Shores\n346.0\n583.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.051694\n-159.332566\nEntire rental unit\nEntire home/apt\n4\nNaN\n1 bath\n1.0\n2.0\n[\"First aid kit\", \"Carbon monoxide alarm\", \"Fi...\n$299.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n0\n19\n49\n324\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nExempt\nf\n97\n85\n12\n0\nNaN\n\n\n\n\n5374 rows × 75 columns\n\n\n\nTo clean up the data, we identify which columns may be useful for the analysis and drop the rest. Numerical value columns that provide information about the property, such as review numbers, number of people the property can accommodate, and the different review ratings are preserved to the best extent possible to be used in our machine learning model later.\n\n# Subset data columns\ncolumns= [\"id\",\"host_id\", \"host_since\", \"host_response_rate\", \"host_acceptance_rate\", \"host_is_superhost\", \"host_listings_count\", \"host_identity_verified\", \"neighbourhood_cleansed\",\n                                                       \"neighbourhood_group_cleansed\", \"latitude\", \"longitude\", \"property_type\",\n                                                       \"room_type\", \"accommodates\", \"bathrooms_text\", \"bedrooms\", \"beds\", \"price\",\n                                                      \"minimum_nights\", \"number_of_reviews\", \"first_review\", \"last_review\",\n                                                       \"review_scores_rating\", \"review_scores_accuracy\", \"review_scores_cleanliness\", \"review_scores_checkin\", \"review_scores_communication\", \"review_scores_location\",\n                                                       \"reviews_per_month\"]\nlistings_kauai_clean = listings_kauai[columns]\nlistings_kauai_clean.head()\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_since\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_listings_count\nhost_identity_verified\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms_text\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\n0\n152645\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22042\n-159.47754\nEntire condo\nEntire home/apt\n2\n1 bath\n1.0\n1.0\n$110.00\n3\n206\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n1.40\n\n\n1\n153304\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22266\n-159.47804\nEntire condo\nEntire home/apt\n6\n2 baths\n2.0\n2.0\n$195.00\n3\n142\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n0.96\n\n\n2\n153397\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22097\n-159.47804\nEntire condo\nEntire home/apt\n8\n3 baths\n3.0\n4.0\n$285.00\n3\n20\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n0.15\n\n\n3\n162600\n756093\n2011-06-28\n99%\n96%\nt\n75.0\nt\nKapaa-Wailua\nKauai\n22.06174\n-159.32052\nEntire condo\nEntire home/apt\n6\n2.5 baths\n2.0\n3.0\n$588.00\n1\n20\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n0.19\n\n\n4\n13238\n51647\n2009-11-05\n100%\n100%\nf\n2.0\nf\nNorth Shore Kauai\nKauai\n22.21789\n-159.47184\nEntire condo\nEntire home/apt\n2\n1 bath\nNaN\n1.0\n$169.00\n3\n166\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n1.50\n\n\n\n\n\n\n\nOur price data is stored as a string. In order to analyze this value, we need to convert it to a float. The dollar sign $ and any commas , are removed.\n\n# Convert price from string to float        \n\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].str.strip(\"$\")\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].replace(',', '', regex=True)\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].astype(float)\n    \nlistings_kauai_clean.head()\n\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].str.strip(\"$\")\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].replace(',', '', regex=True)\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].astype(float)\n\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_since\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_listings_count\nhost_identity_verified\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms_text\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\n0\n152645\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22042\n-159.47754\nEntire condo\nEntire home/apt\n2\n1 bath\n1.0\n1.0\n110.0\n3\n206\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n1.40\n\n\n1\n153304\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22266\n-159.47804\nEntire condo\nEntire home/apt\n6\n2 baths\n2.0\n2.0\n195.0\n3\n142\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n0.96\n\n\n2\n153397\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22097\n-159.47804\nEntire condo\nEntire home/apt\n8\n3 baths\n3.0\n4.0\n285.0\n3\n20\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n0.15\n\n\n3\n162600\n756093\n2011-06-28\n99%\n96%\nt\n75.0\nt\nKapaa-Wailua\nKauai\n22.06174\n-159.32052\nEntire condo\nEntire home/apt\n6\n2.5 baths\n2.0\n3.0\n588.0\n1\n20\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n0.19\n\n\n4\n13238\n51647\n2009-11-05\n100%\n100%\nf\n2.0\nf\nNorth Shore Kauai\nKauai\n22.21789\n-159.47184\nEntire condo\nEntire home/apt\n2\n1 bath\nNaN\n1.0\n169.0\n3\n166\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n1.50\n\n\n\n\n\n\n\nIn order to use our location data properly, we need to convert our dataframe into a geodataframe. We use the provided listings coordinates to convert it to a gpd.\n\n# Convert to gpd\nlistings_kauai_gpd = gpd.GeoDataFrame(\n    listings_kauai_clean,\n    geometry=gpd.points_from_xy(listings_kauai_clean[\"longitude\"], listings_kauai_clean[\"latitude\"]), # Note: Longitude has to come first!\ncrs=\"EPSG:4326\",\n)\n\n\n\n1.1.3 Calendar data\nWe load in our calendar data, which includes the price per listing each of the 365 days from the webscraped date. For example, listing id 3002 will have prices from September 2023 to September 2024. We will use this data later to understand the cyclicality of prices. We will use the full dataset, rather than limiting it to the listings of Kauai, to understand Hawaii’s hospitality season better as a whole.\nAfterwards, we repeat the same steps of dropping unnecessary columns and converting our price string data into a float.\n\n# Calendar \ncalendar = pd.read_csv(\"./data/calendar_sep_23.csv.gz\") # key is \"listing_id\"; in listing is \"id\"\ncalendar.head() # 12,168,742 records\n\n\n\n\n\n\n\n\nlisting_id\ndate\navailable\nprice\nadjusted_price\nminimum_nights\nmaximum_nights\n\n\n\n\n0\n3002\n2023-09-11\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n1\n3002\n2023-09-12\nt\n$85.00\n$85.00\n4.0\n7.0\n\n\n2\n3002\n2023-09-13\nf\n$120.00\n$120.00\n4.0\n7.0\n\n\n3\n3002\n2023-09-14\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n4\n3002\n2023-09-15\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n\n\n\n\n\n\n# Drop unnecessary columns\ncalendar = calendar.drop(['adjusted_price', 'minimum_nights', 'maximum_nights', 'available'], axis=1)\n\n\n# Clean price data\ncalendar['price'] = calendar['price'].str.strip(\"$\")\ncalendar['price'] = calendar['price'].replace(',', '', regex=True)\ncalendar[\"price\"] = calendar.price.astype(float)\n\nFor visualization purposes, we then group the calendar data per date and find the median price for that day.\n\n# Calendar data, per day mean price\ncalendar_grp = calendar.groupby(\"date\", as_index=False)[['price']].median()\ncalendar_grp\n\n\n\n\n\n\n\n\ndate\nprice\n\n\n\n\n0\n2023-09-10\n259.0\n\n\n1\n2023-09-11\n249.0\n\n\n2\n2023-09-12\n249.0\n\n\n3\n2023-09-13\n249.0\n\n\n4\n2023-09-14\n249.0\n\n\n...\n...\n...\n\n\n361\n2024-09-05\n286.0\n\n\n362\n2024-09-06\n291.0\n\n\n363\n2024-09-07\n291.0\n\n\n364\n2024-09-08\n287.0\n\n\n365\n2024-09-09\n270.0\n\n\n\n\n366 rows × 2 columns\n\n\n\nIn order to use our calendar data, we need our calendar dates to be recognized as dates and not as strings. We reformat it appropriately.\n\n# Format date as date\nfrom datetime import datetime\n\ncalendar_grp['date'] = pd.to_datetime(calendar_grp['date'])\ncalendar_grp['date2'] = calendar_grp['date'].apply(lambda x: x.strftime(\"%Y-%m-%d\"))\n\n\ncalendar_grp = calendar_grp.drop(['date'], axis=1)\ncalendar_grp = calendar_grp.rename(columns={\"date2\": \"date\"})\ncalendar_grp.head()\n\n\n\n\n\n\n\n\nprice\ndate\n\n\n\n\n0\n259.0\n2023-09-10\n\n\n1\n249.0\n2023-09-11\n\n\n2\n249.0\n2023-09-12\n\n\n3\n249.0\n2023-09-13\n\n\n4\n249.0\n2023-09-14\n\n\n\n\n\n\n\n\n\n\n1.2 Foursquare API\nIn order to have a more robust analysis on what affects pricing per listing, we acquire nearby venue data via Foursquare’s API in order to note which venues are near each listing location.\nThe Foursquare documentation notes the order of returned venues depend on popularity and distance. We will assume then the returned venues are also those that tourists or users of Airbnb will also consider in whether they want that to be within a convenient distance.\n\nfrom time import sleep  # to create delays in API requests\n\nEach Airbnb listing coordinates are separated into a different dataframe for the API request.\n\n# Create separate lat and long list\n\nlist_api = listings_kauai_gpd[['id','latitude', 'longitude']]\n\nlist_gpd = gpd.GeoDataFrame(\n    list_api,\n    geometry=gpd.points_from_xy(list_api[\"longitude\"], list_api[\"latitude\"]),\n    crs= \"EPSG:4326\",\n)\n\nThe request requires one to provide the location information, a radius distance boundary, and a limit of the number of nearby venues to return. As the API request takes a very long time to run, the venue request is limited to a radius of 500 meters around the specified listing location and 3 venues.\nWe then create a dataframe to receive the information, which wil linclude the venue’s name, location coordinates, and its category (eg. a restaurant or a museum).\n\n# Foursquare API\n\ndef getNearbyVenues(names, latitudes, longitudes, radius=1000, limit=5):\n    headers = {\n        'Accept': 'application/json',\n        'Authorization': 'fsq37Wmf6OswRoeBR+tSgZ0pmkLmK2NjMD0T8lycAzMxAQU=' #API Key\n    }\n\n    URL = 'https://api.foursquare.com/v3/places/search?ll={},{}&radius={}&limit={}'\n\n    venues_list = []\n    for name, lat, lng in zip(names, latitudes, longitudes):\n\n        url = URL.format(lat, lng, radius, limit)\n        data = requests.get(url, headers=headers).json()\n        # print(data['results'][0]['categories'][0]['name'])\n        # process venues_list\n        for record in data['results']:\n            if record.get('categories'):\n                venues_list.append({\n                        'Listing': name,\n                        'Listing Latitude': lat,\n                        'Listing Longitude': lng,\n                        'Venue': record['name'],\n                        'Venue Latitude': record['geocodes']['main']['latitude'],\n                        'Venue Longitude': record['geocodes']['main']['longitude'],\n                        'Venue Category': record['categories'][0]['name'],\n                    })\n         \n    # create your dataframe\n    nearby_venues = pd.DataFrame(venues_list)\n\n    return(nearby_venues)\n\n\nkauai_venues = getNearbyVenues(names = list_api.id,\n                              latitudes = list_api.latitude,\n                              longitudes = list_api.longitude,\n                              radius = 500,\n                              limit = 3\n                        )\nkauai_venues.head()\n\n\n\n\n\n\n\n\nListing\nListing Latitude\nListing Longitude\nVenue\nVenue Latitude\nVenue Longitude\nVenue Category\n\n\n\n\n0\n152645\n22.220420\n-159.477540\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n1\n153304\n22.222660\n-159.478040\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n2\n153304\n22.222660\n-159.478040\nWyndham Bali Hai Villas\n22.224518\n-159.482362\nSwimming Pool\n\n\n3\n153397\n22.220970\n-159.478040\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n4\n162600\n22.061740\n-159.320520\nCoconut's Fish Cafe\n22.062863\n-159.321463\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14423\n975283100809274999\n22.051842\n-159.334251\nEathealthy Cafe\n22.052967\n-159.333542\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\n22.051842\n-159.334251\nNapali Brewing Co.\n22.052041\n-159.333768\nBrewery\n\n\n14425\n975288623054648385\n22.051694\n-159.332566\nKorean Bar-B-Q\n22.051846\n-159.333259\nBBQ Joint\n\n\n14426\n975288623054648385\n22.051694\n-159.332566\nEathealthy Cafe\n22.052967\n-159.333542\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\n22.051694\n-159.332566\nMema Thai Chinese Cuisine\n22.052505\n-159.333426\nThai Restaurant\n\n\n\n\n14428 rows × 7 columns\n\n\n\nDue to the inconsistency of number of venues returned and the limited number of request calls that can be made within time contraints, the venues data will be used for data exploration but will not be included in the machine learning model. The dataframe is cleaned appropriately.\n\n# Drop columns and rename column\n\ncolumns_to_drop = [1, 2, 4, 5]\nkauai_venues_clean = kauai_venues.drop(kauai_venues.columns[columns_to_drop], axis=1)\n\n\n\n\n\n\n\n\nListing\nVenue\nCategory\n\n\n\n\n0\n152645\nO'Hara Construction & Design\nConstruction\n\n\n1\n153304\nO'Hara Construction & Design\nConstruction\n\n\n2\n153304\nWyndham Bali Hai Villas\nSwimming Pool\n\n\n3\n153397\nO'Hara Construction & Design\nConstruction\n\n\n4\n162600\nCoconut's Fish Cafe\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n\n\n14423\n975283100809274999\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\nNapali Brewing Co.\nBrewery\n\n\n14425\n975288623054648385\nKorean Bar-B-Q\nBBQ Joint\n\n\n14426\n975288623054648385\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\nMema Thai Chinese Cuisine\nThai Restaurant\n\n\n\n\n14428 rows × 3 columns\n\n\n\n\nkauai_venues_clean = kauai_venues_clean.rename(columns={\"Venue Category\": \"Category\", \"Listing\":\"id\"})\nkauai_venues_clean\n\n\n\n\n\n\n\n\nid\nVenue\nCategory\n\n\n\n\n0\n152645\nO'Hara Construction & Design\nConstruction\n\n\n1\n153304\nO'Hara Construction & Design\nConstruction\n\n\n2\n153304\nWyndham Bali Hai Villas\nSwimming Pool\n\n\n3\n153397\nO'Hara Construction & Design\nConstruction\n\n\n4\n162600\nCoconut's Fish Cafe\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n\n\n14423\n975283100809274999\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\nNapali Brewing Co.\nBrewery\n\n\n14425\n975288623054648385\nKorean Bar-B-Q\nBBQ Joint\n\n\n14426\n975288623054648385\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\nMema Thai Chinese Cuisine\nThai Restaurant\n\n\n\n\n14428 rows × 3 columns"
  },
  {
    "objectID": "final-project-draft.html#visualizations",
    "href": "final-project-draft.html#visualizations",
    "title": "1. Explore Airbnb Data",
    "section": "2. Visualizations",
    "text": "2. Visualizations\n\nimport folium\nimport seaborn as sns\nimport altair as alt  \nimport holoviews as hv\nhv.extension(\"bokeh\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\nThe listings data is spatially joined so that each listing has a corresponding neighbourhood.\n\n# Spatial join between listings and neighbourhoods\nlistings_kauai_nh = gpd.sjoin(\n    list_gpd,\n    nh.to_crs(list_gpd.crs),  # The neighborhoods (in the same CRS)\n    predicate=\"within\",\n    how=\"left\",\n)\n\nlistings_kauai_nh.head()\n\n\n\n\n\n\n\n\nid\nlatitude\nlongitude\ngeometry\nindex_right\nneighbourhood\nneighbourhood_group\n\n\n\n\n0\n152645\n22.22042\n-159.47754\nPOINT (-159.47754 22.22042)\n5\nNorth Shore Kauai\nKauai\n\n\n1\n153304\n22.22266\n-159.47804\nPOINT (-159.47804 22.22266)\n5\nNorth Shore Kauai\nKauai\n\n\n2\n153397\n22.22097\n-159.47804\nPOINT (-159.47804 22.22097)\n5\nNorth Shore Kauai\nKauai\n\n\n3\n162600\n22.06174\n-159.32052\nPOINT (-159.32052 22.06174)\n6\nKapaa-Wailua\nKauai\n\n\n4\n13238\n22.21789\n-159.47184\nPOINT (-159.47184 22.21789)\n5\nNorth Shore Kauai\nKauai\n\n\n\n\n\n\n\nTo get a general sense of the popular neighbourhood, we group the data to see how many listings are within each neighbourhood of Kauai. The North Shore Kauai and Koloa-Poipu are the clear winners.\n\n# Group listings by neighbourhood\ntotals = listings_kauai_gpd.groupby(\"neighbourhood_cleansed\", as_index=False).size()\ntotals = totals.rename(columns={\"neighbourhood_cleansed\": \"neighbourhood\"})\ntotals\n\n\n\n\n\n\n\n\nneighbourhood\nsize\n\n\n\n\n0\nKapaa-Wailua\n960\n\n\n1\nKoloa-Poipu\n1591\n\n\n2\nLihue\n617\n\n\n3\nNorth Shore Kauai\n2185\n\n\n4\nWaimea-Kekaha\n21\n\n\n\n\n\n\n\nThe grouped data is spatially joined so that the neighbourhood geometry data includes the number of listings.\n\n# Merge neighbourhood geometry back in\ntotals_gm = nh.merge(totals, on=\"neighbourhood\")\ntotals_gm\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\ngeometry\nsize\n\n\n\n\n0\nNorth Shore Kauai\nKauai\nMULTIPOLYGON (((-159.40448 22.22918, -159.4044...\n2185\n\n\n1\nKapaa-Wailua\nKauai\nMULTIPOLYGON (((-159.33158 22.19300, -159.3313...\n960\n\n\n2\nWaimea-Kekaha\nKauai\nMULTIPOLYGON (((-159.69701 22.16169, -159.6970...\n21\n\n\n3\nLihue\nKauai\nMULTIPOLYGON (((-159.45149 22.06189, -159.4476...\n617\n\n\n4\nKoloa-Poipu\nKauai\nMULTIPOLYGON (((-159.49322 21.97766, -159.4922...\n1591\n\n\n\n\n\n\n\n\n2.1 Map of spatial distribution of listings on Kauai\nThe below folium map shows that the central north and the central south points of the island of Kauai have many listings, and a good number are scattered across the east coast. The north shore features the famous mountains of Kauai, while the south side is warmer and great for water activities, such as kayaking. The east coast is known for its beautiful beaches and coconuts, and much of the commercial activities and resorts are available there.\n\n# Folium map of listings with popup and tooltip\n\nm = folium.Map(location=[22.0746, -159.51680], zoom_start=10)\n\nfolium.GeoJson(\n    listings_kauai_gpd,\n    name=\"Airbnb Listings\",\n    marker=folium.Circle(radius=4, fill_color=\"red\", fill_opacity=0.4, color=\"red\", weight=1),\n    tooltip=folium.GeoJsonTooltip(fields=[\"price\", \"property_type\", \"accommodates\"]),\n    popup=folium.GeoJsonPopup(fields=[\"price\", \"property_type\", \"accommodates\"]),\n    highlight_function=lambda x: {\"fillOpacity\": 0.8},\n    zoom_on_click=True,\n).add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nTo get a better sense of which area is popular, we create a map where the number of listings are normalized by the area. It looks like the south - Koloa-Poipu - is the clear winner. Because it is the smallest neighbourhood, the normalization has a greater impact on this area.\n\n# Normalize by area\n\ntotals_gm[\"N_per_area\"] = (\n    totals_gm[\"size\"] / (totals_gm.geometry.area) * 1e4\n)\n\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_1553/4157050995.py:4: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  totals_gm[\"size\"] / (totals_gm.geometry.area) * 1e4\n\n\n\n# Listings by neighbourhood, normalized by area\n\n# Needed to line up the colorbar properly\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\n# Create the figure/axes\nfig, ax = plt.subplots(figsize=(8, 8))\n\n#Create a nice, lined up colorbar axes (called \"cax\" here)\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.2)\n\n# Plot\ntotals_gm.plot(\n    ax=ax,\n    cax=cax,\n    column=\"N_per_area\",  \n    edgecolor=\"white\",\n    linewidth=0.5,\n    legend=True,\n    cmap=\"viridis\",\n)\n\n# NEW: Get the limits of the GeoDataFrame\nxmin, ymin, xmax, ymax = totals_gm.total_bounds\n\n# NEW: Set the xlims and ylims\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\n\n# Format\nax.set_axis_off()\nax.set_aspect(\"equal\")\n\n\n\n\nA different map without normalization is plotted. As expected, the North Shore Kauai is the most popular. Assuming the number of listings reflect demand, it looks like visitors may be flocking to these areas.\nFor a first-time vistor, the west side is not recommended, due to its fewer and spare listings.\n\n# Listings by neighbourhood (not normalized)\n\ntotals_gm.explore(\n    column=\"size\",  # Similar to plot(); specify the value column\n    cmap=\"viridis\",  # What color map do we want to use\n    tiles=\"CartoDB positron\",  # What basemap tiles do we want to use?\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n2.2 Data Exploration Plots\n1. Box Plot of Prices and Neighbourhoods\nPricing is a huge consideration in determining which airbnb listing to stay at. The below show box plots show the prices have a good number of outliars - which is to be expected of the hospitality industry, where the range of prices that people may be willing to pay is much wider than others.\nKoloa-Poipu has the highest average price, but the highest prices are found in North Shore and Kapaa-Wailua, which was the area with the third highest listings and located on the east side of the island. Waimea-Kekaha has the least variability in prices, but this is also due to having the least number of listings.\n\n# Price by neighbourhood\n\nplt.figure(figsize=(6,6))\nsns.boxplot(listings_kauai_gpd, x=\"neighbourhood_cleansed\", y=np.log(listings_kauai_gpd.price))\n\nplt.xlabel('Neighbourhood', fontsize=12)\nplt.ylabel('Price (natural log)', fontsize=12)\n\nplt.title('Airbnb Prices in Kauai Neighbourhoods', fontsize=16)\nplt.show()\n\n\n\n\n2. Heat Map of Room Type and Review Score\nThe below heat map looks at the relationship between the type of room offered and the overall review score left by the user. It looks like the room types available are entire home or private, and there seems to be a significant number of high review score rating between 4.5 and 5 for the entire home category.\n\n# Heat map of room types and their review scores\nalt.data_transformers.disable_max_rows()\n\nalt.Chart(listings_kauai_gpd).mark_rect().encode(\n    x=alt.X('review_scores_rating', bin=alt.Bin(maxbins=15)),\n    color='count()',\n    y=alt.Y('room_type'),\n)\n\n\n\n\n\n\n\n\n3. Heat Map of Room Type and Price\nThe second heat map adds more information. It looks like a significant number of listings are “entire home/apt” rather than just a private room. Most listings are “entire home / apt” and priced in the $100-$500 range per night. This makes Kauai a rather expensive destination.\nWe can draw a few assumptions: - Kauai airbnbs seem to provide more privacy and space - Or perhaps the properties are just built smaller as the real estate is pricey, and so providing just a “private room” is not really an option - If so, the airbnb industry in Kauai is less a side hustle for home owners / renters, but rather a hospitality business that requires one to manage properties and live in their own residence\n\n# Heat map of room types and their price\n\nalt.Chart(listings_kauai_gpd).mark_rect().encode(\n    x=alt.X('price', bin=alt.Bin(maxbins=15)),\n    color='count()',\n    y=alt.Y('room_type'),\n)\n\n\n\n\n\n\n\n\n4. Heat Map of Price and Review Score\nDoes price have a relationship with the review?\nThe below heat map looks similar to the previous map, which suggests the high number of 4.5-5.0 score ratings for the $100-$500 range reflects more the frequency of data points, rather than users feeling those properties are that much better deserve higher ratings than others.\n\n# Heat map of price and review\n\nalt.Chart(listings_kauai_gpd).mark_rect().encode(\n    x=alt.X('review_scores_rating', bin=alt.Bin(maxbins=15)),\n    color='count()',\n    y=alt.Y('price', bin=alt.Bin(maxbins=15)),\n)\n\n\n\n\n\n\n\n\n\n\n2.3 Plot of price cyclicality\n5. Plot of median price for 365 days\nTo understand the cyclicality of the prices in Hawaii’s hospitality industry, the median price of listings previously calculated is plotted here.\nThe end of the year holiday season has a clear spike in pricing from mid December to mid January. Interestingly, the price does not drop back to prior holiday season levels mid January to end of April. Afterwards, there is a bit of a lull until the summer holiday season, but prices are still not as high as January - April. After August, the prices clearly drop.\nThe smaller peaks in pricing throughout reflect cyclicality of prices for weekdays vs. week nights. The prices are clearly very sensitive to the time of the year.\nVisitors should consider the month of September to get the lowest price.\n\n# Calendar: Per day, mean price\n\n# Line chart of price vs date\nchart = calendar_grp.hvplot(x='date', y='price', kind=\"line\")\n\n# Vertical line + label for end of year holidays\nvline = hv.VLine(2023-12-25).opts(color=\"black\")\nlabel1 = hv.Text(\"2023-10-17\", 300, \"Low Season\", halign=\"center\")\nlabel2 = hv.Text(\"2023-12-25\", 350, \"Holiday Season\", halign=\"center\")\nlabel3 = hv.Text(\"2024-06-15\", 320, \"High Season\", halign=\"center\")\n\nfinal_chart = chart * vline * label1 * label2 * label3\nfinal_chart\n\n\n\n\n\n  \n\n\n\n\n\n\n2.4 Nearby venues\nTo see whether there’s noticeable patterns in the venues near the airbnb listings, a few plots were configured.\nTo understand which venue categories were appearing most frequently, a new dataframe was configured to see the occurence per category and sorted from greatest to smallest.\nUnsurprisingly, the beach, landmarks and outdoors, golf course, and restaurants (American and Hawaii) are the top 5 venue categories that are popular and near our our Airbnb listings.\nConsidering Kauai vacation costs are quite high, and would attract wealthier or more “luxurious” type vacations, it’s interesting that cheaper alcohol establishment - sports bar - was much ranked high as the 8th (since Python starts counting from 0, we can add 1 to the index to get the ranking) most frequent venue, while a hotel bar was ranked lower at 20th. This again may have more to do with the number of establishments - it is reasonable to assume there are more sports bars than hotel bars - rather than to assume that many more airbnb listings are near sports bars due to their popularity.\n\ncategory_counts = kauai_venues_clean['Category'].value_counts().reset_index()\ncategory_counts[:26]\n\n\n\n\n\n\n\n\nindex\nCategory\n\n\n\n\n0\nBeach\n2448\n\n\n1\nAmerican Restaurant\n1769\n\n\n2\nLandmarks and Outdoors\n780\n\n\n3\nGolf Course\n763\n\n\n4\nHawaiian Restaurant\n579\n\n\n5\nSwimming Pool\n536\n\n\n6\nMonument\n531\n\n\n7\nSports Bar\n512\n\n\n8\nVacation Rental\n483\n\n\n9\nCafé\n443\n\n\n10\nCoffee Shop\n420\n\n\n11\nConstruction\n361\n\n\n12\nBurger Joint\n331\n\n\n13\nHiking Trail\n327\n\n\n14\nBicycle Store\n256\n\n\n15\nScenic Lookout\n244\n\n\n16\nDeli\n234\n\n\n17\nCave\n219\n\n\n18\nPlayground\n202\n\n\n19\nHotel Bar\n200\n\n\n20\nLounge\n193\n\n\n21\nGrocery Store\n179\n\n\n22\nIce Cream Parlor\n176\n\n\n23\nItalian Restaurant\n170\n\n\n24\nTennis Court\n165\n\n\n25\nSushi Restaurant\n142\n\n\n\n\n\n\n\nNext, to see whether specific venues are having an impact, a subset of the listings data and the venue data is merged together to calculate the stats.\n\n# Merge selected listings data and venue data\nsubset = listings_kauai_gpd[['id','price']]\n\nmerged_df = pd.merge(subset, kauai_venues_clean, on='id', how='left') \nmerged_df\n\n\n\n\n\n\n\n\nid\nprice\nVenue\nCategory\n\n\n\n\n0\n152645\n110.0\nO'Hara Construction & Design\nConstruction\n\n\n1\n153304\n195.0\nO'Hara Construction & Design\nConstruction\n\n\n2\n153304\n195.0\nWyndham Bali Hai Villas\nSwimming Pool\n\n\n3\n153397\n285.0\nO'Hara Construction & Design\nConstruction\n\n\n4\n162600\n588.0\nCoconut's Fish Cafe\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n...\n\n\n14531\n975283100809274999\n399.0\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14532\n975283100809274999\n399.0\nNapali Brewing Co.\nBrewery\n\n\n14533\n975288623054648385\n299.0\nKorean Bar-B-Q\nBBQ Joint\n\n\n14534\n975288623054648385\n299.0\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14535\n975288623054648385\n299.0\nMema Thai Chinese Cuisine\nThai Restaurant\n\n\n\n\n14536 rows × 4 columns\n\n\n\n\n# Calcuate stats\ncategory_stats = venue_merge.groupby('Venue').agg(Frequency=('Venue', 'size'), MedPrice=('price', 'median')).reset_index()\ncategory_stats = category_stats.sort_values(by='Frequency', ascending=False)\ncategory_stats.head()\n\n\n\n\n\n\n\n\nVenue\nFrequency\nMedPrice\n\n\n\n\n310\nWyndham Bali Hai Villas\n536\n249.0\n\n\n228\nPrinceville Makai Golf Club\n512\n240.0\n\n\n181\nMauna Kai Condo\n482\n220.0\n\n\n257\nSleeping Giant Grill\n383\n248.0\n\n\n186\nNanea Restaurant and Bar\n379\n250.0\n\n\n\n\n\n\n\nThere is a great range in prices and categories. The list below would be useful for travellers though in picking accommodations and deciding their activities in Kauai. The assumption is that the listings are frequently located nearby these venues for reasons that the airbnb users consider when choosing where to stay. A straightforward example is the Princeville Makai Golf Club - many people fly to Kauai to take advantage of the beautiful golf course.\nWe will not include the venue data in the machine learning model as it would need thorough category cleansing before use.\n\ncategory_stats = category_stats.sort_values(by='MedPrice', ascending=False)\n\n# Trim to see specific venues where frequency is greater than 100\nvalid2 = (category_stats['Frequency'] &gt; 100)\ntrim2 = category_stats.loc[valid2]\ntrim2 = trim2.sort_values(by='Frequency', ascending=False)\n\n# Add back category data\nven_cat = merged_df[['Venue', 'Category']]\ntrim2 = pd.merge(trim2, ven_cat, on='Venue', how='left')\ntrim2 = trim2.drop_duplicates(subset=['Venue']).reset_index(drop=True)\ntrim2\n\n\n\n\n\n\n\n\nVenue\nFrequency\nMedPrice\nCategory\n\n\n\n\n0\nWyndham Bali Hai Villas\n536\n249.0\nSwimming Pool\n\n\n1\nPrinceville Makai Golf Club\n512\n240.0\nGolf Course\n\n\n2\nMauna Kai Condo\n482\n220.0\nVacation Rental\n\n\n3\nSleeping Giant Grill\n383\n248.0\nHawaiian Restaurant\n\n\n4\nNanea Restaurant and Bar\n379\n250.0\nAmerican Restaurant\n\n\n5\nO'Hara Construction & Design\n349\n263.0\nConstruction\n\n\n6\nBrennecke's Beach\n329\n333.0\nBeach\n\n\n7\nKalapaki Joe's Poipu\n314\n335.0\nSports Bar\n\n\n8\nHukilau Lanai\n313\n264.0\nAmerican Restaurant\n\n\n9\nIsland Country Markets #93\n290\n261.0\nCoffee Shop\n\n\n10\nKiahuna Beach\n265\n379.0\nBeach\n\n\n11\nThe Pacific Ocean\n255\n239.0\nLandmarks and Outdoors\n\n\n12\nPedego Electric Bikes Poipu\n252\n329.5\nBicycle Store\n\n\n13\nMakai Grill\n249\n239.0\nAmerican Restaurant\n\n\n14\nKauai Plantatin Railway\n239\n239.0\nLandmarks and Outdoors\n\n\n15\nCathedral Beach\n235\n240.0\nBeach\n\n\n16\nMakahuena Point\n231\n367.0\nMonument\n\n\n17\nWaipouli Delicatessen & Restaurant\n230\n456.0\nDeli\n\n\n18\nTurtle Cove\n219\n264.0\nCave\n\n\n19\nPoipu Beach Lava rocks\n214\n379.0\nBeach\n\n\n20\nSouth Point\n213\n383.0\nHiking Trail\n\n\n21\nLittle Fish Coffee\n208\n361.0\nCafé\n\n\n22\nOasis on the Beach\n205\n402.0\nAmerican Restaurant\n\n\n23\nHappy Talk Bar & Restaurant\n198\n402.0\nSports Bar\n\n\n24\nAnini Beach\n196\n279.5\nScenic Lookout\n\n\n25\nPrinceville Playground\n187\n215.0\nPlayground\n\n\n26\nCoconut's Fish Cafe\n186\n400.5\nHawaiian Restaurant\n\n\n27\nSunset at the Cliffs\n180\n275.0\nLandmarks and Outdoors\n\n\n28\nPoipu Shopping Village\n178\n431.0\nBurger Joint\n\n\n29\nShutters Lounge at Kauai Beach Resort\n176\n226.0\nHotel Bar\n\n\n30\nKeoki's Paradise\n169\n441.0\nAmerican Restaurant\n\n\n31\nKalapaki Beach\n167\n458.0\nBeach\n\n\n32\nHanalei Bay Resort tennis center\n165\n411.0\nTennis Court\n\n\n33\nImua Coffee Roasters\n162\n228.5\nCafé\n\n\n34\nNaupaka Terrace Restaurant\n160\n238.5\nAmerican Restaurant\n\n\n35\nHideaways Pizza Pub\n156\n302.5\nItalian Restaurant\n\n\n36\nKiahuna Golf Club\n150\n425.0\nGolf Course\n\n\n37\nRed Salt\n142\n343.0\nSushi Restaurant\n\n\n38\nLava Lava Beach Club - Kauai\n122\n235.0\nBar\n\n\n39\nPrinceville Bluffs\n121\n259.0\nMonument\n\n\n40\nLawa i Beach\n121\n276.0\nBeach\n\n\n41\nSea Lodge Beach\n121\n285.0\nBeach\n\n\n42\nDuke's\n121\n458.0\nAmerican Restaurant\n\n\n43\nQueen's Bath\n121\n318.0\nMonument\n\n\n44\nHideaways Beach\n121\n378.0\nBeach\n\n\n45\nBeach House Restaurant\n120\n277.0\nAmerican Restaurant\n\n\n46\nFoodland Waipouli\n116\n487.0\nGrocery Store\n\n\n47\nGrand Club\n114\n355.5\nLounge\n\n\n48\nSacred Fishing Grounds\n109\n329.0\nBeach\n\n\n49\nBaby Beach Bungalow Poipu Kauai\n108\n296.0\nBeach\n\n\n50\nLappert's Hawaii\n106\n315.0\nCoffee Shop"
  },
  {
    "objectID": "final-project-draft.html#train-a-random-forest-on-the-data-listings-calendar",
    "href": "final-project-draft.html#train-a-random-forest-on-the-data-listings-calendar",
    "title": "1. Explore Airbnb Data",
    "section": "3.1 Train a Random Forest on the data (listings + calendar)",
    "text": "3.1 Train a Random Forest on the data (listings + calendar)\n\n3.1.1 Preprocessing\nTo find a model that will predict the prices of listings, I create a machine learning model utilizing the previous dataset. The data is checked using functions such as looking at the statistical summary and counting the number of nas to figure what what preprocessing is needed. Afterwards a pipeline is created to handle numerical value columns and categorical value columns.\n\n# look at summary statistics\nlistings_kauai_gpd.describe()\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_listings_count\nlatitude\nlongitude\naccommodates\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\ncount\n5.374000e+03\n5.374000e+03\n5374.000000\n5374.000000\n5374.000000\n5374.000000\n4767.000000\n5349.000000\n5374.000000\n5374.000000\n5374.000000\n3935.000000\n3933.000000\n3933.000000\n3933.000000\n3933.000000\n3933.000000\n3935.000000\n\n\nmean\n3.858371e+17\n1.967164e+08\n318.085225\n22.063652\n-159.430920\n5.147376\n1.983218\n2.710600\n455.457760\n10.416263\n25.351321\n4.782755\n4.795372\n4.796242\n4.844439\n4.815675\n4.885477\n1.050038\n\n\nstd\n3.983683e+17\n1.758776e+08\n602.599661\n0.145281\n0.067343\n2.514550\n1.051412\n1.522949\n873.957766\n36.664834\n50.890054\n0.349420\n0.373735\n0.316880\n0.313340\n0.357005\n0.224364\n1.109448\n\n\nmin\n1.323800e+04\n7.984000e+03\n1.000000\n21.868660\n-159.714620\n1.000000\n1.000000\n1.000000\n0.000000\n1.000000\n0.000000\n0.000000\n1.000000\n1.000000\n1.000000\n1.000000\n1.000000\n0.010000\n\n\n25%\n3.771922e+07\n3.907322e+07\n8.000000\n21.883481\n-159.478199\n4.000000\n1.000000\n2.000000\n225.000000\n1.000000\n0.000000\n4.710000\n4.750000\n4.730000\n4.820000\n4.780000\n4.860000\n0.270000\n\n\n50%\n5.413300e+07\n1.118173e+08\n73.000000\n22.055690\n-159.459800\n4.000000\n2.000000\n2.000000\n303.000000\n2.000000\n5.000000\n4.890000\n4.910000\n4.890000\n4.950000\n4.940000\n4.950000\n0.640000\n\n\n75%\n7.977253e+17\n3.896978e+08\n303.000000\n22.220300\n-159.347262\n6.000000\n2.000000\n3.000000\n466.750000\n3.000000\n25.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n1.460000\n\n\nmax\n9.770428e+17\n5.350458e+08\n2766.000000\n22.229090\n-159.302780\n16.000000\n11.000000\n18.000000\n25000.000000\n185.000000\n645.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n9.070000\n\n\n\n\n\n\n\n\n# look at number of listings\nlen(listings_kauai_gpd)\n\n5374\n\n\n\n# check if we need to reformat data\ndata_types = listings_kauai_gpd.dtypes\ndata_types\n\nid                                 int64\nhost_id                            int64\nhost_since                        object\nhost_response_rate                object\nhost_acceptance_rate              object\nhost_is_superhost                 object\nhost_listings_count              float64\nhost_identity_verified            object\nneighbourhood_cleansed            object\nneighbourhood_group_cleansed      object\nlatitude                         float64\nlongitude                        float64\nproperty_type                     object\nroom_type                         object\naccommodates                       int64\nbathrooms_text                    object\nbedrooms                         float64\nbeds                             float64\nprice                            float64\nminimum_nights                     int64\nnumber_of_reviews                  int64\nfirst_review                      object\nlast_review                       object\nreview_scores_rating             float64\nreview_scores_accuracy           float64\nreview_scores_cleanliness        float64\nreview_scores_checkin            float64\nreview_scores_communication      float64\nreview_scores_location           float64\nreviews_per_month                float64\ngeometry                        geometry\ndtype: object\n\n\n\n# look at nas\nnan_count = listings_kauai_gpd.isna().sum()\nnan_count\n\nid                                 0\nhost_id                            0\nhost_since                         0\nhost_response_rate               172\nhost_acceptance_rate             108\nhost_is_superhost                  0\nhost_listings_count                0\nhost_identity_verified             0\nneighbourhood_cleansed             0\nneighbourhood_group_cleansed       0\nlatitude                           0\nlongitude                          0\nproperty_type                      0\nroom_type                          0\naccommodates                       0\nbathrooms_text                     0\nbedrooms                           0\nbeds                               0\nprice                              0\nminimum_nights                     0\nnumber_of_reviews                  0\nfirst_review                    1437\nlast_review                     1437\nreview_scores_rating               0\nreview_scores_accuracy             0\nreview_scores_cleanliness          0\nreview_scores_checkin              0\nreview_scores_communication        0\nreview_scores_location             0\nreviews_per_month                  0\ngeometry                           0\ndtype: int64\n\n\n\n# trim data where prices are $50 - $10,000\nvalid = (listings_kauai_gpd['price'] &gt; 20) & (listings_kauai_gpd['price'] &lt; 10000)\ntrim = listings_kauai_gpd.loc[valid]\n\n\n# drop cols and nas\ncols = [\"price\", \"geometry\",\n    \"host_response_rate\",\n    \"host_acceptance_rate\",\n    \"host_listings_count\",\n    \"neighbourhood_cleansed\",\n    \"bathrooms_text\",\n    \"bedrooms\",\n    \"accommodates\",\n    \"beds\",\n    \"minimum_nights\",\n    \"number_of_reviews\",\n    \"review_scores_rating\",\n    \"review_scores_accuracy\",\n    \"review_scores_cleanliness\",\n    \"review_scores_checkin\",\n    \"review_scores_communication\",\n    \"review_scores_location\",\n    \"reviews_per_month\",\n    \"room_type\", \"property_type\", \"host_is_superhost\", \"host_identity_verified\"]\n\ntrim = trim[cols].dropna()\nlen(trim)\n\n5138\n\n\n\n# change numerical column values to float\n\n# trim[['bathrooms_text']] = trim[['bathrooms_text']].astype(float)\ntrim['bathrooms'] = trim['bathrooms_text'].str.extract('(\\d+)')\ntrim = trim.drop('bathrooms_text', axis=1)\n\n\n# remove % and convert to float\ntrim['host_response_rate'] = pd.to_numeric(trim['host_response_rate'].str.replace('%', ''), errors='coerce') / 100.0\ntrim['host_acceptance_rate'] = pd.to_numeric(trim['host_acceptance_rate'].str.replace('%', ''), errors='coerce') / 100.0\n\nAttributeError: Can only use .str accessor with string values!\n\n\n\n# drop nas for column superhost - this is a categorical column\ntrim = trim.dropna(subset=['host_is_superhost'])\n\n# replace nas with median for the numeric columns\ntrim = trim.fillna(trim.median())\n\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/2743277231.py:5: FutureWarning: The default value of numeric_only in GeoDataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  trim = trim.fillna(trim.median())\n\n\n\n#Set up pipeline\n\n#Preprocessing\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler, OneHotEncoder\nscaler = StandardScaler()\n\nfrom sklearn.compose import ColumnTransformer\n\n# Models\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Model selection\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n\n\n# Numerical columns\nnum_cols =  [\n    \"host_response_rate\",\n    \"host_acceptance_rate\",\n    \"host_listings_count\",\n    \"bathrooms\",\n    \"bedrooms\",\n    \"accommodates\",\n    \"beds\",\n    \"minimum_nights\",\n    \"number_of_reviews\",\n    \"review_scores_rating\",\n    \"review_scores_accuracy\",\n    \"review_scores_cleanliness\",\n    \"review_scores_checkin\",\n    \"review_scores_communication\",\n    \"review_scores_location\",\n    \"reviews_per_month\",\n]\n\n# Categorical columns\ncat_cols = [\"neighbourhood_cleansed\", \"room_type\", \"property_type\", \"host_is_superhost\", \"host_identity_verified\"]\n\n\n# Initialize the OHE transformer\nohe = OneHotEncoder()\n\n\n# Transform numerical and categorical columns separately\ntransformer = ColumnTransformer(\n    transformers=[\n        (\"num\", StandardScaler(), num_cols),\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), cat_cols),\n    ]\n)\n\n\n# Initialize the pipeline\n## NOTE: only using 5 estimators to run in a reasonable time\npipe = make_pipeline(\n    transformer, RandomForestRegressor(n_estimators=5, \n                                       random_state=42)\n)\n\n\nmodel = pipe['randomforestregressor']\n\n\n\n3.1.2 Training\n\nUse a 70/30% training/test split and predict the log of the sales price.\nUse GridSearchCV to perform a k-fold cross validation that optimize 2 hyperparameters of the RandomForestRegressor\nAfter fitting your model and finding the optimal hyperparameters, you should evaluate the score (R-squared) on the test set (the original 30% sample withheld)\n\n\n# Split training and test data 70/30\ntrain_set, test_set = train_test_split(trim, test_size=0.3, random_state=42)\n\n\n# Create the target labels: log of sale price\ny_train = np.log(train_set[\"price\"])\ny_test = np.log(test_set[\"price\"])\n\n\n# Create grid of parameters to search\npipe.named_steps\nmodel_step = \"randomforestregressor\"\nparam_grid = {\n    f\"{model_step}__n_estimators\": [5, 10, 15, 20], # Reducing as run time is very long\n    f\"{model_step}__max_depth\": [2, 3, 5, 7],\n}\n\n\n# Create the grid and use 3-fold CV\ngrid = GridSearchCV(pipe, param_grid, cv=3, verbose=1)\n\n\n# Run the search\ngrid.fit(train_set, y_train)\n\nFitting 3 folds for each of 16 candidates, totalling 48 fits\n\n\nGridSearchCV(cv=3,\n             estimator=Pipeline(steps=[('columntransformer',\n                                        ColumnTransformer(transformers=[('num',\n                                                                         StandardScaler(),\n                                                                         ['host_response_rate',\n                                                                          'host_acceptance_rate',\n                                                                          'host_listings_count',\n                                                                          'bathrooms',\n                                                                          'bedrooms',\n                                                                          'accommodates',\n                                                                          'beds',\n                                                                          'minimum_nights',\n                                                                          'number_of_reviews',\n                                                                          'review_scores_rating',\n                                                                          'review_scores_accuracy',\n                                                                          'review_scores_cleanliness',\n                                                                          'rev...\n                                                                        ('cat',\n                                                                         OneHotEncoder(handle_unknown='ignore'),\n                                                                         ['neighbourhood_cleansed',\n                                                                          'room_type',\n                                                                          'property_type',\n                                                                          'host_is_superhost',\n                                                                          'host_identity_verified'])])),\n                                       ('randomforestregressor',\n                                        RandomForestRegressor(n_estimators=5,\n                                                              random_state=42))]),\n             param_grid={'randomforestregressor__max_depth': [2, 3, 5, 7],\n                         'randomforestregressor__n_estimators': [5, 10, 15,\n                                                                 20]},\n             verbose=1)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GridSearchCVGridSearchCV(cv=3,\n             estimator=Pipeline(steps=[('columntransformer',\n                                        ColumnTransformer(transformers=[('num',\n                                                                         StandardScaler(),\n                                                                         ['host_response_rate',\n                                                                          'host_acceptance_rate',\n                                                                          'host_listings_count',\n                                                                          'bathrooms',\n                                                                          'bedrooms',\n                                                                          'accommodates',\n                                                                          'beds',\n                                                                          'minimum_nights',\n                                                                          'number_of_reviews',\n                                                                          'review_scores_rating',\n                                                                          'review_scores_accuracy',\n                                                                          'review_scores_cleanliness',\n                                                                          'rev...\n                                                                        ('cat',\n                                                                         OneHotEncoder(handle_unknown='ignore'),\n                                                                         ['neighbourhood_cleansed',\n                                                                          'room_type',\n                                                                          'property_type',\n                                                                          'host_is_superhost',\n                                                                          'host_identity_verified'])])),\n                                       ('randomforestregressor',\n                                        RandomForestRegressor(n_estimators=5,\n                                                              random_state=42))]),\n             param_grid={'randomforestregressor__max_depth': [2, 3, 5, 7],\n                         'randomforestregressor__n_estimators': [5, 10, 15,\n                                                                 20]},\n             verbose=1)estimator: PipelinePipeline(steps=[('columntransformer',\n                 ColumnTransformer(transformers=[('num', StandardScaler(),\n                                                  ['host_response_rate',\n                                                   'host_acceptance_rate',\n                                                   'host_listings_count',\n                                                   'bathrooms', 'bedrooms',\n                                                   'accommodates', 'beds',\n                                                   'minimum_nights',\n                                                   'number_of_reviews',\n                                                   'review_scores_rating',\n                                                   'review_scores_accuracy',\n                                                   'review_scores_cleanliness',\n                                                   'review_scores_checkin',\n                                                   'review_scores_communication',\n                                                   'review_scores_location',\n                                                   'reviews_per_month']),\n                                                 ('cat',\n                                                  OneHotEncoder(handle_unknown='ignore'),\n                                                  ['neighbourhood_cleansed',\n                                                   'room_type', 'property_type',\n                                                   'host_is_superhost',\n                                                   'host_identity_verified'])])),\n                ('randomforestregressor',\n                 RandomForestRegressor(n_estimators=5, random_state=42))])columntransformer: ColumnTransformerColumnTransformer(transformers=[('num', StandardScaler(),\n                                 ['host_response_rate', 'host_acceptance_rate',\n                                  'host_listings_count', 'bathrooms',\n                                  'bedrooms', 'accommodates', 'beds',\n                                  'minimum_nights', 'number_of_reviews',\n                                  'review_scores_rating',\n                                  'review_scores_accuracy',\n                                  'review_scores_cleanliness',\n                                  'review_scores_checkin',\n                                  'review_scores_communication',\n                                  'review_scores_location',\n                                  'reviews_per_month']),\n                                ('cat', OneHotEncoder(handle_unknown='ignore'),\n                                 ['neighbourhood_cleansed', 'room_type',\n                                  'property_type', 'host_is_superhost',\n                                  'host_identity_verified'])])num['host_response_rate', 'host_acceptance_rate', 'host_listings_count', 'bathrooms', 'bedrooms', 'accommodates', 'beds', 'minimum_nights', 'number_of_reviews', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'reviews_per_month']StandardScalerStandardScaler()cat['neighbourhood_cleansed', 'room_type', 'property_type', 'host_is_superhost', 'host_identity_verified']OneHotEncoderOneHotEncoder(handle_unknown='ignore')RandomForestRegressorRandomForestRegressor(n_estimators=5, random_state=42)\n\n\n\n# The best hyper parameters\ngrid.best_params_\n\n{'randomforestregressor__max_depth': 7,\n 'randomforestregressor__n_estimators': 20}\n\n\n\n# Random forest model pipeline with optimized depth and estimators\nforest_pipe = make_pipeline(\n    transformer, \n    RandomForestRegressor(n_estimators=20, max_depth=7, random_state=42), \n)\n\n\n# Run the k-fold cross validation\nscores = cross_val_score(\n    forest_pipe,\n    train_set,\n    y_train,\n    cv=3,\n)\n\n\n# Report\nprint(\"R^2 scores = \", scores)\nprint(\"Scores mean = \", scores.mean())\nprint(\"Score std dev = \", scores.std())\n\nR^2 scores =  [0.65066977 0.60736221 0.61580208]\nScores mean =  0.6246113562692326\nScore std dev =  0.01874546441942987\n\n\n\n# Fit a random forest\nprint(\"Random forest\")\nforest_pipe.fit(train_set, y_train)\n\n# Print the training score\ntraining_score = forest_pipe.score(train_set, y_train)\nprint(f\"Training Score = {training_score}\")\n\n# Print the test score\ntest_score = forest_pipe.score(test_set, y_test)\nprint(f\"Test Score = {test_score}\")\n\nRandom forest\nTraining Score = 0.7024855326116177\nTest Score = 0.6788891721934799"
  },
  {
    "objectID": "final-project-draft.html#calculate-the-percent-error-of-model-predictions-for-each-listing-in-the-test-set",
    "href": "final-project-draft.html#calculate-the-percent-error-of-model-predictions-for-each-listing-in-the-test-set",
    "title": "Final Project",
    "section": "2.2 Calculate the percent error of model predictions for each listing in the test set",
    "text": "2.2 Calculate the percent error of model predictions for each listing in the test set\n\n# Create dataset of test set\nX = trim.loc[test_set.index]\n\n# Make the predictions\nlog_predictions = forest_pipe.predict(test_set)\n\n# Convert the predicted test values from log\nX['prediction'] = np.exp(log_predictions)\n\n\n# Calculate percent error\n\nX[\"pct_error\"] = ((X[\"prediction\"]-(X[\"price\"]))/X[\"price\"])*100\nX.head()\n\n\n\n\n\n\n\n\nprice\ngeometry\nhost_response_rate\nhost_acceptance_rate\nhost_listings_count\nneighbourhood_cleansed\nbedrooms\naccommodates\nbeds\nminimum_nights\nnumber_of_reviews\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\nroom_type\nproperty_type\nhost_is_superhost\nhost_identity_verified\nbathrooms\nprediction\npct_error\n\n\n\n\n895\n975.0\nPOINT (-159.30537 22.14641)\n1.00\n0.99\n73.0\nKapaa-Wailua\n5.0\n14\n8.0\n5\n7\n3.86\n4.29\n4.86\n4.57\n4.29\n4.43\n0.12\nEntire home/apt\nEntire home\nf\nt\n5\n1177.225162\n20.741042\n\n\n1043\n477.0\nPOINT (-159.32060 22.06245)\n0.94\n0.99\n168.0\nKapaa-Wailua\n2.0\n6\n3.0\n3\n10\n5.00\n5.00\n5.00\n4.90\n4.80\n4.90\n0.18\nEntire home/apt\nEntire condo\nf\nt\n3\n444.374645\n-6.839697\n\n\n4194\n240.0\nPOINT (-159.48115 22.22414)\n0.95\n0.15\n190.0\nNorth Shore Kauai\n2.0\n6\n3.0\n2\n1\n5.00\n5.00\n5.00\n5.00\n5.00\n5.00\n1.00\nEntire home/apt\nEntire rental unit\nf\nt\n2\n252.047241\n5.019684\n\n\n853\n255.0\nPOINT (-159.49446 22.22018)\n0.83\n1.00\n2.0\nNorth Shore Kauai\n2.0\n4\n2.0\n3\n74\n4.73\n4.76\n4.57\n4.88\n4.82\n4.88\n1.20\nEntire home/apt\nEntire condo\nf\nf\n1\n237.130747\n-7.007550\n\n\n2167\n383.0\nPOINT (-159.46511 21.87851)\n0.98\n0.99\n303.0\nKoloa-Poipu\n1.0\n4\n2.0\n1\n2\n5.00\n5.00\n5.00\n4.50\n5.00\n5.00\n0.09\nEntire home/apt\nEntire home/apt\nf\nt\n2\n392.422861\n2.460277"
  },
  {
    "objectID": "final-project-draft.html#calculate-the-percent-error-of-model-predictions",
    "href": "final-project-draft.html#calculate-the-percent-error-of-model-predictions",
    "title": "1. Explore Airbnb Data",
    "section": "3.2 Calculate the percent error of model predictions",
    "text": "3.2 Calculate the percent error of model predictions\n\n# Create dataset of test set\nX = trim.loc[test_set.index]\n\n# Make the predictions\nlog_predictions = forest_pipe.predict(test_set)\n\n# Convert the predicted test values from log\nX['prediction'] = np.exp(log_predictions)\n\n\n# Calculate percent error\n\nX[\"pct_error\"] = ((X[\"prediction\"]-(X[\"price\"]))/X[\"price\"])*100\nX.head()\n\n\n\n\n\n\n\n\nprice\ngeometry\nhost_response_rate\nhost_acceptance_rate\nhost_listings_count\nneighbourhood_cleansed\nbedrooms\naccommodates\nbeds\nminimum_nights\nnumber_of_reviews\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\nroom_type\nproperty_type\nhost_is_superhost\nhost_identity_verified\nbathrooms\nprediction\npct_error\n\n\n\n\n895\n975.0\nPOINT (-159.30537 22.14641)\n1.00\n0.99\n73.0\nKapaa-Wailua\n5.0\n14\n8.0\n5\n7\n3.86\n4.29\n4.86\n4.57\n4.29\n4.43\n0.12\nEntire home/apt\nEntire home\nf\nt\n5\n1177.225162\n20.741042\n\n\n1043\n477.0\nPOINT (-159.32060 22.06245)\n0.94\n0.99\n168.0\nKapaa-Wailua\n2.0\n6\n3.0\n3\n10\n5.00\n5.00\n5.00\n4.90\n4.80\n4.90\n0.18\nEntire home/apt\nEntire condo\nf\nt\n3\n444.374645\n-6.839697\n\n\n4194\n240.0\nPOINT (-159.48115 22.22414)\n0.95\n0.15\n190.0\nNorth Shore Kauai\n2.0\n6\n3.0\n2\n1\n5.00\n5.00\n5.00\n5.00\n5.00\n5.00\n1.00\nEntire home/apt\nEntire rental unit\nf\nt\n2\n252.047241\n5.019684\n\n\n853\n255.0\nPOINT (-159.49446 22.22018)\n0.83\n1.00\n2.0\nNorth Shore Kauai\n2.0\n4\n2.0\n3\n74\n4.73\n4.76\n4.57\n4.88\n4.82\n4.88\n1.20\nEntire home/apt\nEntire condo\nf\nf\n1\n237.130747\n-7.007550\n\n\n2167\n383.0\nPOINT (-159.46511 21.87851)\n0.98\n0.99\n303.0\nKoloa-Poipu\n1.0\n4\n2.0\n1\n2\n5.00\n5.00\n5.00\n4.50\n5.00\n5.00\n0.09\nEntire home/apt\nEntire home/apt\nf\nt\n2\n392.422861\n2.460277"
  },
  {
    "objectID": "analysis/final-project.html",
    "href": "analysis/final-project.html",
    "title": "Airbnb Pricing Exploration and Modelling - Kauai, Hawaii",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport hvplot.pandas\n\nnp.random.seed(42)\n\n# Show all columns\npd.options.display.max_columns = 999\n\n# APIs\nimport requests\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe load in 3 datasets that provide the relevant airbnb listings data. - 1. Neighbourhoods: the shape file of Hawaii’s neighbourhoods - 2. Listings: listings scraped from September 2023 - 3. Calendar: price per listing per each of the 365 days from scraped date\n\n\nThe neighbourhoods are grouped by the Hawaii islands, and each island has neighbourhoods within.\n\n# Neighbourhoods\nnh = gpd.read_file(\"./data/neighbourhoods.geojson\")\nnh #ESPG 4326\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\ngeometry\n\n\n\n\n0\nKoolauloa\nHonolulu\nMULTIPOLYGON (((-158.00347 21.69941, -158.0028...\n\n\n1\nNorth Shore Oahu\nHonolulu\nMULTIPOLYGON (((-158.02224 21.69103, -158.0219...\n\n\n2\nWaianae\nHonolulu\nMULTIPOLYGON (((-158.26744 21.57220, -158.2673...\n\n\n3\nKoolaupoko\nHonolulu\nMULTIPOLYGON (((-157.83830 21.53446, -157.8381...\n\n\n4\nCentral Oahu\nHonolulu\nMULTIPOLYGON (((-157.92108 21.53219, -157.9209...\n\n\n5\nNorth Shore Kauai\nKauai\nMULTIPOLYGON (((-159.40448 22.22918, -159.4044...\n\n\n6\nKapaa-Wailua\nKauai\nMULTIPOLYGON (((-159.33158 22.19300, -159.3313...\n\n\n7\nWaimea-Kekaha\nKauai\nMULTIPOLYGON (((-159.69701 22.16169, -159.6970...\n\n\n8\nLihue\nKauai\nMULTIPOLYGON (((-159.45149 22.06189, -159.4476...\n\n\n9\nHanapepe-Eleele\nKauai\nMULTIPOLYGON (((-159.50306 22.05268, -159.4991...\n\n\n10\nKoloa-Poipu\nKauai\nMULTIPOLYGON (((-159.49322 21.97766, -159.4922...\n\n\n11\nMolokai\nMaui\nMULTIPOLYGON (((-157.19720 21.21427, -157.1969...\n\n\n12\nLahaina\nMaui\nMULTIPOLYGON (((-156.62697 21.02254, -156.6265...\n\n\n13\nWailuku-Kahului\nMaui\nMULTIPOLYGON (((-156.58237 21.01779, -156.5821...\n\n\n14\nPaia-Haiku\nMaui\nMULTIPOLYGON (((-156.32796 20.94421, -156.3278...\n\n\n15\nLanai\nMaui\nMULTIPOLYGON (((-156.98807 20.92921, -156.9880...\n\n\n16\nHana\nMaui\nMULTIPOLYGON (((-156.19115 20.88776, -156.1909...\n\n\n17\nKihei-Makena\nMaui\nMULTIPOLYGON (((-156.55399 20.83973, -156.5515...\n\n\n18\nKahoolawe\nMaui\nMULTIPOLYGON (((-156.57218 20.60308, -156.5721...\n\n\n19\nHamakua\nHawaii\nMULTIPOLYGON (((-155.69984 20.18567, -155.6994...\n\n\n20\nSouth Kohala\nHawaii\nMULTIPOLYGON (((-155.70545 20.11025, -155.6994...\n\n\n21\nNorth Hilo\nHawaii\nMULTIPOLYGON (((-155.28469 20.01916, -155.2845...\n\n\n22\nSouth Hilo\nHawaii\nMULTIPOLYGON (((-155.12853 19.90004, -155.1283...\n\n\n23\nNorth Kona\nHawaii\nMULTIPOLYGON (((-155.88483 19.91049, -155.8837...\n\n\n24\nNorth Kohala\nHawaii\nMULTIPOLYGON (((-155.87222 20.26316, -155.8719...\n\n\n25\nPuna\nHawaii\nMULTIPOLYGON (((-154.99055 19.71630, -154.9904...\n\n\n26\nKau\nHawaii\nMULTIPOLYGON (((-155.35286 19.58976, -155.3524...\n\n\n27\nSouth Kona\nHawaii\nMULTIPOLYGON (((-155.95546 19.51061, -155.9551...\n\n\n28\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.87518 21.45657, -157.8749...\n\n\n29\nEwa\nHonolulu\nMULTIPOLYGON (((-158.04696 21.41613, -158.0436...\n\n\n30\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.88030 21.31254, -157.8803...\n\n\n31\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.96070 21.36958, -157.9608...\n\n\n32\nEast Honolulu\nHonolulu\nMULTIPOLYGON (((-157.65279 21.30893, -157.6527...\n\n\n33\nMakawao-Pukalani-Kula\nMaui\nMULTIPOLYGON (((-156.40127 20.82874, -156.3978...\n\n\n\n\n\n\n\n\n\n\nWe load in the listings data that was scraped from airbnb in September 2023. It includes all relevant listings and its associated details, such as host rating, property and property rating, posted available from scraped date to a year out (365 days out). This will be our main data source file.\n\n# Listings\nlistings = pd.read_csv(\"./data/listings_sep_23.csv.gz\")\n\nDue to our future API usage, we want to limit the number of listings to analyze for the project. This scope of this analysis will be contained to one island - the island of Kauai, known to be the prettiest island of Hawaii. In order to make sure we have enough data, we group the listings per the island. It looks like there are 5364 listings for Kauai.\n\n# Listings per neighbourhood\nnh_grp = listings.groupby(\"neighbourhood_group_cleansed\").size()\nnh_grp # I will analyze neighbourhood group Kauai: 5374 listings\n\nneighbourhood_group_cleansed\nHawaii       8223\nHonolulu     9573\nKauai        5374\nMaui        10169\ndtype: int64\n\n\nWe subset the listings data for the airbnb properties located in Kauai.\n\n# Subset listings for the island of Kauai\nlistings_kauai = listings.loc[listings[\"neighbourhood_group_cleansed\"] == \"Kauai\"].reset_index(drop=True)\nlistings_kauai\n\n\n\n\n\n\n\n\nid\nlisting_url\nscrape_id\nlast_scraped\nsource\nname\ndescription\nneighborhood_overview\npicture_url\nhost_id\nhost_url\nhost_name\nhost_since\nhost_location\nhost_about\nhost_response_time\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_thumbnail_url\nhost_picture_url\nhost_neighbourhood\nhost_listings_count\nhost_total_listings_count\nhost_verifications\nhost_has_profile_pic\nhost_identity_verified\nneighbourhood\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms\nbathrooms_text\nbedrooms\nbeds\namenities\nprice\nminimum_nights\nmaximum_nights\nminimum_minimum_nights\nmaximum_minimum_nights\nminimum_maximum_nights\nmaximum_maximum_nights\nminimum_nights_avg_ntm\nmaximum_nights_avg_ntm\ncalendar_updated\nhas_availability\navailability_30\navailability_60\navailability_90\navailability_365\ncalendar_last_scraped\nnumber_of_reviews\nnumber_of_reviews_ltm\nnumber_of_reviews_l30d\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreview_scores_value\nlicense\ninstant_bookable\ncalculated_host_listings_count\ncalculated_host_listings_count_entire_homes\ncalculated_host_listings_count_private_rooms\ncalculated_host_listings_count_shared_rooms\nreviews_per_month\n\n\n\n\n0\n152645\nhttps://www.airbnb.com/rooms/152645\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.54 · 1 bedroom · 1 b...\nOur Studio has ceramic tiled floors and a larg...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nNaN\nNorth Shore Kauai\nKauai\n22.220420\n-159.477540\nEntire condo\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"F...\n$110.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n1\n7\n14\n133\n2023-09-10\n206\n16\n1\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n4.69\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n1.40\n\n\n1\n153304\nhttps://www.airbnb.com/rooms/153304\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.64 · 2 bedrooms · 2 ...\nThe condo has ceramic tile flooring throughout...\nSandpiper Village is centrally located within ...\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nPrinceville, Hawaii, United States\nNorth Shore Kauai\nKauai\n22.222660\n-159.478040\nEntire condo\nEntire home/apt\n6\nNaN\n2 baths\n2.0\n2.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"F...\n$195.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n5\n8\n13\n136\n2023-09-10\n142\n15\n1\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n4.69\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n0.96\n\n\n2\n153397\nhttps://www.airbnb.com/rooms/153397\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.74 · 3 bedrooms · 4 ...\n3 BDRM 3 Bath w/ Queen Airbed- Sleeps 8 - Tile...\nNaN\nhttps://a0.muscache.com/pictures/969894/71ff7f...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nNaN\nNorth Shore Kauai\nKauai\n22.220970\n-159.478040\nEntire condo\nEntire home/apt\n8\nNaN\n3 baths\n3.0\n4.0\n[\"Hair dryer\", \"Hot water\", \"Pantene shampoo\",...\n$285.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n0\n0\n3\n81\n2023-09-10\n20\n2\n0\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n4.79\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n0.15\n\n\n3\n162600\nhttps://www.airbnb.com/rooms/162600\n20230910055919\n2023-09-11\ncity scrape\nCondo in Kapaa · ★4.95 · 2 bedrooms · 3 beds ·...\nAt the forefront of East Shore accommodation i...\nNaN\nhttps://a0.muscache.com/pictures/prohost-api/H...\n756093\nhttps://www.airbnb.com/users/show/756093\nKaua’i\n2011-06-28\nHawaii, United States\nKauai Exclusive Management. A locally owned an...\nwithin an hour\n99%\n96%\nt\nhttps://a0.muscache.com/im/pictures/user/6dec4...\nhttps://a0.muscache.com/im/pictures/user/6dec4...\nKauaʻi\n75.0\n132.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.061740\n-159.320520\nEntire condo\nEntire home/apt\n6\nNaN\n2.5 baths\n2.0\n3.0\n[\"Refrigerator\", \"Hair dryer\", \"BBQ grill\", \"H...\n$588.00\n1\n1125\n3\n3\n1125\n1125\n3.0\n1125.0\nNaN\nt\n3\n4\n27\n112\n2023-09-11\n20\n1\n0\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n4.75\n430080010022\nf\n75\n75\n0\n0\n0.19\n\n\n4\n13238\nhttps://www.airbnb.com/rooms/13238\n20230910055919\n2023-09-11\ncity scrape\nCondo in Princeville · ★4.48 · Studio · 1 bed ...\nOur place is in the Princeville Resort facing ...\nLocated in Princeville Resort. Beautiful Homes...\nhttps://a0.muscache.com/pictures/29269565/35ca...\n51647\nhttps://www.airbnb.com/users/show/51647\nAnnie/Greg\n2009-11-05\nNaN\nAnnie and Greg Fry from Encinitas. We like to...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/51647/profile...\nhttps://a0.muscache.com/im/users/51647/profile...\nKauaʻi\n2.0\n3.0\n['email', 'phone']\nt\nf\nPrinceville, Hawaii, United States\nNorth Shore Kauai\nKauai\n22.217890\n-159.471840\nEntire condo\nEntire home/apt\n2\nNaN\n1 bath\nNaN\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"S...\n$169.00\n3\n1125\n3\n3\n1125\n1125\n3.0\n1125.0\nNaN\nt\n7\n14\n30\n276\n2023-09-11\n166\n17\n0\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n4.52\n540050030025, TA-095-127-9616-01\nt\n2\n2\n0\n0\n1.50\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5369\n974058647912716646\nhttps://www.airbnb.com/rooms/974058647912716646\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Lihue · ★New · 1 bedroom · 1 be...\nRevel in the magical view from this East Side ...\nGreat Central East Side Island Location, 3 mil...\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n65379678\nhttps://www.airbnb.com/users/show/65379678\nJennifer\n2016-04-01\nKapaʻa, HI\nExcited to meet you ! I am a Kaua'i enthusias...\nwithin an hour\n100%\n100%\nt\nhttps://a0.muscache.com/im/pictures/user/6f8eb...\nhttps://a0.muscache.com/im/pictures/user/6f8eb...\nNawiliwili\n9.0\n14.0\n['email', 'phone']\nt\nt\nLihue, Hawaii, United States\nLihue\nKauai\n22.009110\n-159.338350\nEntire rental unit\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"C...\n$185.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n12\n25\n52\n228\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n370030150166, TA-159-050-5472-00\nf\n9\n7\n2\n0\nNaN\n\n\n5370\n974181213482059205\nhttps://www.airbnb.com/rooms/974181213482059205\n20230910055919\n2023-09-10\ncity scrape\nCamper/RV in Anahola · ★New · 1 bedroom · 1 be...\n⭐️⭐️⭐️⭐️⭐️&lt;br /&gt;All Star Host Since 2017 &lt;br /...\nKOA Campers Kauai&lt;br /&gt;Is located near two cam...\nhttps://a0.muscache.com/pictures/hosting/Hosti...\n485051667\nhttps://www.airbnb.com/users/show/485051667\nKoa\n2022-10-25\nNaN\nNaN\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/pictures/user/User-...\nhttps://a0.muscache.com/im/pictures/user/User-...\nNaN\n2.0\n4.0\n['phone']\nt\nt\nAnahola, Hawaii, United States\nKapaa-Wailua\nKauai\n22.157706\n-159.317440\nCamper/RV\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Outdoor dining area\", \"First aid kit\", \"Beac...\n$153.00\n4\n9\n4\n4\n1125\n1125\n4.0\n1125.0\nNaN\nt\n15\n45\n75\n255\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n360020170000, TA-137-306-2656-01\nt\n2\n2\n0\n0\nNaN\n\n\n5371\n975125508230452492\nhttps://www.airbnb.com/rooms/975125508230452492\n20230910055919\n2023-09-11\ncity scrape\nCabin in Kapaʻa · ★New · 2 bedrooms · 2 beds ·...\nSuper rare find! A perfect 2 in 1 experience l...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n239397319\nhttps://www.airbnb.com/users/show/239397319\nNick\n2019-01-27\nKapaʻa, HI\nAfter exploring Kauai and the Big Island via O...\nwithin an hour\n100%\n100%\nt\nhttps://a0.muscache.com/im/pictures/user/60760...\nhttps://a0.muscache.com/im/pictures/user/60760...\nNaN\n10.0\n25.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.053770\n-159.328740\nEntire cabin\nEntire home/apt\n5\nNaN\nHalf-bath\n2.0\n2.0\n[\"First aid kit\", \"BBQ grill\", \"Valley view\", ...\n$214.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n23\n53\n83\n355\n2023-09-11\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n430020100084, TA-117-707-1616-02\nt\n9\n9\n0\n0\nNaN\n\n\n5372\n975283100809274999\nhttps://www.airbnb.com/rooms/975283100809274999\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Kapaʻa · ★New · 2 bedrooms · 4 ...\nThis spacious two-bedroom resort suite measure...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n371942068\nhttps://www.airbnb.com/users/show/371942068\nJoy\n2020-10-14\nNaN\nHi, I'm Joy! I'm excited for you to check out ...\nwithin a few hours\n100%\n44%\nt\nhttps://a0.muscache.com/im/pictures/user/d2890...\nhttps://a0.muscache.com/im/pictures/user/d2890...\nOrmond Shores\n346.0\n583.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.051842\n-159.334251\nEntire rental unit\nEntire home/apt\n6\nNaN\n2 baths\n2.0\n4.0\n[\"Refrigerator\", \"First aid kit\", \"Carbon mono...\n$399.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n29\n59\n89\n364\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nExempt\nf\n97\n85\n12\n0\nNaN\n\n\n5373\n975288623054648385\nhttps://www.airbnb.com/rooms/975288623054648385\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Kapaʻa · ★New · 1 bedroom · 2 b...\nThis spacious one-bedroom resort suite measure...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n371942068\nhttps://www.airbnb.com/users/show/371942068\nJoy\n2020-10-14\nNaN\nHi, I'm Joy! I'm excited for you to check out ...\nwithin a few hours\n100%\n44%\nt\nhttps://a0.muscache.com/im/pictures/user/d2890...\nhttps://a0.muscache.com/im/pictures/user/d2890...\nOrmond Shores\n346.0\n583.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.051694\n-159.332566\nEntire rental unit\nEntire home/apt\n4\nNaN\n1 bath\n1.0\n2.0\n[\"First aid kit\", \"Carbon monoxide alarm\", \"Fi...\n$299.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n0\n19\n49\n324\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nExempt\nf\n97\n85\n12\n0\nNaN\n\n\n\n\n5374 rows × 75 columns\n\n\n\nTo clean up the data, we identify which columns may be useful for the analysis and drop the rest. Numerical value columns that provide information about the property, such as review numbers, number of people the property can accommodate, and the different review ratings are preserved to the best extent possible to be used in our machine learning model later.\n\n# Subset data columns\ncolumns= [\"id\",\"host_id\", \"host_since\", \"host_response_rate\", \"host_acceptance_rate\", \"host_is_superhost\", \"host_listings_count\", \"host_identity_verified\", \"neighbourhood_cleansed\",\n                                                       \"neighbourhood_group_cleansed\", \"latitude\", \"longitude\", \"property_type\",\n                                                       \"room_type\", \"accommodates\", \"bathrooms_text\", \"bedrooms\", \"beds\", \"price\",\n                                                      \"minimum_nights\", \"number_of_reviews\", \"first_review\", \"last_review\",\n                                                       \"review_scores_rating\", \"review_scores_accuracy\", \"review_scores_cleanliness\", \"review_scores_checkin\", \"review_scores_communication\", \"review_scores_location\",\n                                                       \"reviews_per_month\"]\nlistings_kauai_clean = listings_kauai[columns]\nlistings_kauai_clean.head()\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_since\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_listings_count\nhost_identity_verified\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms_text\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\n0\n152645\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22042\n-159.47754\nEntire condo\nEntire home/apt\n2\n1 bath\n1.0\n1.0\n$110.00\n3\n206\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n1.40\n\n\n1\n153304\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22266\n-159.47804\nEntire condo\nEntire home/apt\n6\n2 baths\n2.0\n2.0\n$195.00\n3\n142\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n0.96\n\n\n2\n153397\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22097\n-159.47804\nEntire condo\nEntire home/apt\n8\n3 baths\n3.0\n4.0\n$285.00\n3\n20\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n0.15\n\n\n3\n162600\n756093\n2011-06-28\n99%\n96%\nt\n75.0\nt\nKapaa-Wailua\nKauai\n22.06174\n-159.32052\nEntire condo\nEntire home/apt\n6\n2.5 baths\n2.0\n3.0\n$588.00\n1\n20\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n0.19\n\n\n4\n13238\n51647\n2009-11-05\n100%\n100%\nf\n2.0\nf\nNorth Shore Kauai\nKauai\n22.21789\n-159.47184\nEntire condo\nEntire home/apt\n2\n1 bath\nNaN\n1.0\n$169.00\n3\n166\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n1.50\n\n\n\n\n\n\n\nOur price data is stored as a string. In order to analyze this value, we need to convert it to a float. The dollar sign $ and any commas , are removed.\n\n# Convert price from string to float        \n\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].str.strip(\"$\")\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].replace(',', '', regex=True)\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].astype(float)\n    \nlistings_kauai_clean.head()\n\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].str.strip(\"$\")\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].replace(',', '', regex=True)\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].astype(float)\n\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_since\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_listings_count\nhost_identity_verified\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms_text\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\n0\n152645\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22042\n-159.47754\nEntire condo\nEntire home/apt\n2\n1 bath\n1.0\n1.0\n110.0\n3\n206\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n1.40\n\n\n1\n153304\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22266\n-159.47804\nEntire condo\nEntire home/apt\n6\n2 baths\n2.0\n2.0\n195.0\n3\n142\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n0.96\n\n\n2\n153397\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22097\n-159.47804\nEntire condo\nEntire home/apt\n8\n3 baths\n3.0\n4.0\n285.0\n3\n20\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n0.15\n\n\n3\n162600\n756093\n2011-06-28\n99%\n96%\nt\n75.0\nt\nKapaa-Wailua\nKauai\n22.06174\n-159.32052\nEntire condo\nEntire home/apt\n6\n2.5 baths\n2.0\n3.0\n588.0\n1\n20\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n0.19\n\n\n4\n13238\n51647\n2009-11-05\n100%\n100%\nf\n2.0\nf\nNorth Shore Kauai\nKauai\n22.21789\n-159.47184\nEntire condo\nEntire home/apt\n2\n1 bath\nNaN\n1.0\n169.0\n3\n166\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n1.50\n\n\n\n\n\n\n\nIn order to use our location data properly, we need to convert our dataframe into a geodataframe. We use the provided listings coordinates to convert it to a gpd.\n\n# Convert to gpd\nlistings_kauai_gpd = gpd.GeoDataFrame(\n    listings_kauai_clean,\n    geometry=gpd.points_from_xy(listings_kauai_clean[\"longitude\"], listings_kauai_clean[\"latitude\"]), # Note: Longitude has to come first!\ncrs=\"EPSG:4326\",\n)\n\n\n\n\nWe load in our calendar data, which includes the price per listing each of the 365 days from the webscraped date. For example, listing id 3002 will have prices from September 2023 to September 2024. We will use this data later to understand the cyclicality of prices. We will use the full dataset, rather than limiting it to the listings of Kauai, to understand Hawaii’s hospitality season better as a whole.\nAfterwards, we repeat the same steps of dropping unnecessary columns and converting our price string data into a float.\n\n# Calendar \ncalendar = pd.read_csv(\"./data/calendar_sep_23.csv.gz\") # key is \"listing_id\"; in listing is \"id\"\ncalendar.head() # 12,168,742 records\n\n\n\n\n\n\n\n\nlisting_id\ndate\navailable\nprice\nadjusted_price\nminimum_nights\nmaximum_nights\n\n\n\n\n0\n3002\n2023-09-11\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n1\n3002\n2023-09-12\nt\n$85.00\n$85.00\n4.0\n7.0\n\n\n2\n3002\n2023-09-13\nf\n$120.00\n$120.00\n4.0\n7.0\n\n\n3\n3002\n2023-09-14\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n4\n3002\n2023-09-15\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n\n\n\n\n\n\n# Drop unnecessary columns\ncalendar = calendar.drop(['adjusted_price', 'minimum_nights', 'maximum_nights', 'available'], axis=1)\n\n\n# Clean price data\ncalendar['price'] = calendar['price'].str.strip(\"$\")\ncalendar['price'] = calendar['price'].replace(',', '', regex=True)\ncalendar[\"price\"] = calendar.price.astype(float)\n\nFor visualization purposes, we then group the calendar data per date and find the median price for that day.\n\n# Calendar data, per day mean price\ncalendar_grp = calendar.groupby(\"date\", as_index=False)[['price']].median()\ncalendar_grp\n\n\n\n\n\n\n\n\ndate\nprice\n\n\n\n\n0\n2023-09-10\n259.0\n\n\n1\n2023-09-11\n249.0\n\n\n2\n2023-09-12\n249.0\n\n\n3\n2023-09-13\n249.0\n\n\n4\n2023-09-14\n249.0\n\n\n...\n...\n...\n\n\n361\n2024-09-05\n286.0\n\n\n362\n2024-09-06\n291.0\n\n\n363\n2024-09-07\n291.0\n\n\n364\n2024-09-08\n287.0\n\n\n365\n2024-09-09\n270.0\n\n\n\n\n366 rows × 2 columns\n\n\n\nIn order to use our calendar data, we need our calendar dates to be recognized as dates and not as strings. We reformat it appropriately.\n\n# Format date as date\nfrom datetime import datetime\n\ncalendar_grp['date'] = pd.to_datetime(calendar_grp['date'])\ncalendar_grp['date2'] = calendar_grp['date'].apply(lambda x: x.strftime(\"%Y-%m-%d\"))\n\n\ncalendar_grp = calendar_grp.drop(['date'], axis=1)\ncalendar_grp = calendar_grp.rename(columns={\"date2\": \"date\"})\ncalendar_grp.head()\n\n\n\n\n\n\n\n\nprice\ndate\n\n\n\n\n0\n259.0\n2023-09-10\n\n\n1\n249.0\n2023-09-11\n\n\n2\n249.0\n2023-09-12\n\n\n3\n249.0\n2023-09-13\n\n\n4\n249.0\n2023-09-14\n\n\n\n\n\n\n\n\n\n\n\nIn order to have a more robust analysis on what affects pricing per listing, we acquire nearby venue data via Foursquare’s API in order to note which venues are near each listing location.\nThe Foursquare documentation notes the order of returned venues depend on popularity and distance. We will assume then the returned venues are also those that tourists or users of Airbnb will also consider in whether they want that to be within a convenient distance.\n\nfrom time import sleep  # to create delays in API requests\n\nEach Airbnb listing coordinates are separated into a different dataframe for the API request.\n\n# Create separate lat and long list\n\nlist_api = listings_kauai_gpd[['id','latitude', 'longitude']]\n\nlist_gpd = gpd.GeoDataFrame(\n    list_api,\n    geometry=gpd.points_from_xy(list_api[\"longitude\"], list_api[\"latitude\"]),\n    crs= \"EPSG:4326\",\n)\n\nThe request requires one to provide the location information, a radius distance boundary, and a limit of the number of nearby venues to return. As the API request takes a very long time to run, the venue request is limited to a radius of 500 meters around the specified listing location and 3 venues.\nWe then create a dataframe to receive the information, which wil linclude the venue’s name, location coordinates, and its category (eg. a restaurant or a museum).\n\n# Foursquare API\n\ndef getNearbyVenues(names, latitudes, longitudes, radius=1000, limit=5):\n    headers = {\n        'Accept': 'application/json',\n        'Authorization': 'fsq37Wmf6OswRoeBR+tSgZ0pmkLmK2NjMD0T8lycAzMxAQU=' #API Key\n    }\n\n    URL = 'https://api.foursquare.com/v3/places/search?ll={},{}&radius={}&limit={}'\n\n    venues_list = []\n    for name, lat, lng in zip(names, latitudes, longitudes):\n\n        url = URL.format(lat, lng, radius, limit)\n        data = requests.get(url, headers=headers).json()\n        # print(data['results'][0]['categories'][0]['name'])\n        # process venues_list\n        for record in data['results']:\n            if record.get('categories'):\n                venues_list.append({\n                        'Listing': name,\n                        'Listing Latitude': lat,\n                        'Listing Longitude': lng,\n                        'Venue': record['name'],\n                        'Venue Latitude': record['geocodes']['main']['latitude'],\n                        'Venue Longitude': record['geocodes']['main']['longitude'],\n                        'Venue Category': record['categories'][0]['name'],\n                    })\n         \n    # create your dataframe\n    nearby_venues = pd.DataFrame(venues_list)\n\n    return(nearby_venues)\n\n\nkauai_venues = getNearbyVenues(names = list_api.id,\n                              latitudes = list_api.latitude,\n                              longitudes = list_api.longitude,\n                              radius = 500,\n                              limit = 3\n                        )\nkauai_venues.head()\n\n\n\n\n\n\n\n\nListing\nListing Latitude\nListing Longitude\nVenue\nVenue Latitude\nVenue Longitude\nVenue Category\n\n\n\n\n0\n152645\n22.220420\n-159.477540\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n1\n153304\n22.222660\n-159.478040\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n2\n153304\n22.222660\n-159.478040\nWyndham Bali Hai Villas\n22.224518\n-159.482362\nSwimming Pool\n\n\n3\n153397\n22.220970\n-159.478040\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n4\n162600\n22.061740\n-159.320520\nCoconut's Fish Cafe\n22.062863\n-159.321463\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14423\n975283100809274999\n22.051842\n-159.334251\nEathealthy Cafe\n22.052967\n-159.333542\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\n22.051842\n-159.334251\nNapali Brewing Co.\n22.052041\n-159.333768\nBrewery\n\n\n14425\n975288623054648385\n22.051694\n-159.332566\nKorean Bar-B-Q\n22.051846\n-159.333259\nBBQ Joint\n\n\n14426\n975288623054648385\n22.051694\n-159.332566\nEathealthy Cafe\n22.052967\n-159.333542\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\n22.051694\n-159.332566\nMema Thai Chinese Cuisine\n22.052505\n-159.333426\nThai Restaurant\n\n\n\n\n14428 rows × 7 columns\n\n\n\nDue to the inconsistency of number of venues returned and the limited number of request calls that can be made within time contraints, the venues data will be used for data exploration but will not be included in the machine learning model. The dataframe is cleaned appropriately.\n\n# Drop columns and rename column\n\ncolumns_to_drop = [1, 2, 4, 5]\nkauai_venues_clean = kauai_venues.drop(kauai_venues.columns[columns_to_drop], axis=1)\n\n\n\n\n\n\n\n\nListing\nVenue\nCategory\n\n\n\n\n0\n152645\nO'Hara Construction & Design\nConstruction\n\n\n1\n153304\nO'Hara Construction & Design\nConstruction\n\n\n2\n153304\nWyndham Bali Hai Villas\nSwimming Pool\n\n\n3\n153397\nO'Hara Construction & Design\nConstruction\n\n\n4\n162600\nCoconut's Fish Cafe\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n\n\n14423\n975283100809274999\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\nNapali Brewing Co.\nBrewery\n\n\n14425\n975288623054648385\nKorean Bar-B-Q\nBBQ Joint\n\n\n14426\n975288623054648385\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\nMema Thai Chinese Cuisine\nThai Restaurant\n\n\n\n\n14428 rows × 3 columns\n\n\n\n\nkauai_venues_clean = kauai_venues_clean.rename(columns={\"Venue Category\": \"Category\", \"Listing\":\"id\"})\nkauai_venues_clean\n\n\n\n\n\n\n\n\nid\nVenue\nCategory\n\n\n\n\n0\n152645\nO'Hara Construction & Design\nConstruction\n\n\n1\n153304\nO'Hara Construction & Design\nConstruction\n\n\n2\n153304\nWyndham Bali Hai Villas\nSwimming Pool\n\n\n3\n153397\nO'Hara Construction & Design\nConstruction\n\n\n4\n162600\nCoconut's Fish Cafe\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n\n\n14423\n975283100809274999\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\nNapali Brewing Co.\nBrewery\n\n\n14425\n975288623054648385\nKorean Bar-B-Q\nBBQ Joint\n\n\n14426\n975288623054648385\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\nMema Thai Chinese Cuisine\nThai Restaurant\n\n\n\n\n14428 rows × 3 columns"
  },
  {
    "objectID": "analysis/final-project.html#visualizations",
    "href": "analysis/final-project.html#visualizations",
    "title": "Airbnb Pricing Exploration and Modelling - Kauai, Hawaii",
    "section": "2. Visualizations",
    "text": "2. Visualizations\n\nimport folium\nimport seaborn as sns\nimport altair as alt  \nimport holoviews as hv\nhv.extension(\"bokeh\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\nThe listings data is spatially joined so that each listing has a corresponding neighbourhood.\n\n# Spatial join between listings and neighbourhoods\nlistings_kauai_nh = gpd.sjoin(\n    list_gpd,\n    nh.to_crs(list_gpd.crs),  # The neighborhoods (in the same CRS)\n    predicate=\"within\",\n    how=\"left\",\n)\n\nlistings_kauai_nh.head()\n\n\n\n\n\n\n\n\nid\nlatitude\nlongitude\ngeometry\nindex_right\nneighbourhood\nneighbourhood_group\n\n\n\n\n0\n152645\n22.22042\n-159.47754\nPOINT (-159.47754 22.22042)\n5\nNorth Shore Kauai\nKauai\n\n\n1\n153304\n22.22266\n-159.47804\nPOINT (-159.47804 22.22266)\n5\nNorth Shore Kauai\nKauai\n\n\n2\n153397\n22.22097\n-159.47804\nPOINT (-159.47804 22.22097)\n5\nNorth Shore Kauai\nKauai\n\n\n3\n162600\n22.06174\n-159.32052\nPOINT (-159.32052 22.06174)\n6\nKapaa-Wailua\nKauai\n\n\n4\n13238\n22.21789\n-159.47184\nPOINT (-159.47184 22.21789)\n5\nNorth Shore Kauai\nKauai\n\n\n\n\n\n\n\nTo get a general sense of the popular neighbourhood, we group the data to see how many listings are within each neighbourhood of Kauai. The North Shore Kauai and Koloa-Poipu are the clear winners.\n\n# Group listings by neighbourhood\ntotals = listings_kauai_gpd.groupby(\"neighbourhood_cleansed\", as_index=False).size()\ntotals = totals.rename(columns={\"neighbourhood_cleansed\": \"neighbourhood\"})\ntotals\n\n\n\n\n\n\n\n\nneighbourhood\nsize\n\n\n\n\n0\nKapaa-Wailua\n960\n\n\n1\nKoloa-Poipu\n1591\n\n\n2\nLihue\n617\n\n\n3\nNorth Shore Kauai\n2185\n\n\n4\nWaimea-Kekaha\n21\n\n\n\n\n\n\n\nThe grouped data is spatially joined so that the neighbourhood geometry data includes the number of listings.\n\n# Merge neighbourhood geometry back in\ntotals_gm = nh.merge(totals, on=\"neighbourhood\")\ntotals_gm\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\ngeometry\nsize\n\n\n\n\n0\nNorth Shore Kauai\nKauai\nMULTIPOLYGON (((-159.40448 22.22918, -159.4044...\n2185\n\n\n1\nKapaa-Wailua\nKauai\nMULTIPOLYGON (((-159.33158 22.19300, -159.3313...\n960\n\n\n2\nWaimea-Kekaha\nKauai\nMULTIPOLYGON (((-159.69701 22.16169, -159.6970...\n21\n\n\n3\nLihue\nKauai\nMULTIPOLYGON (((-159.45149 22.06189, -159.4476...\n617\n\n\n4\nKoloa-Poipu\nKauai\nMULTIPOLYGON (((-159.49322 21.97766, -159.4922...\n1591\n\n\n\n\n\n\n\n\n2.1 Map of spatial distribution of listings on Kauai\nThe below folium map shows that the central north and the central south points of the island of Kauai have many listings, and a good number are scattered across the east coast. The north shore features the famous mountains of Kauai, while the south side is warmer and great for water activities, such as kayaking. The east coast is known for its beautiful beaches and coconuts, and much of the commercial activities and resorts are available there.\n\n# Folium map of listings with popup and tooltip\n\nm = folium.Map(location=[22.0746, -159.51680], zoom_start=10)\n\nfolium.GeoJson(\n    listings_kauai_gpd,\n    name=\"Airbnb Listings\",\n    marker=folium.Circle(radius=4, fill_color=\"red\", fill_opacity=0.4, color=\"red\", weight=1),\n    tooltip=folium.GeoJsonTooltip(fields=[\"price\", \"property_type\", \"accommodates\"]),\n    popup=folium.GeoJsonPopup(fields=[\"price\", \"property_type\", \"accommodates\"]),\n    highlight_function=lambda x: {\"fillOpacity\": 0.8},\n    zoom_on_click=True,\n).add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nTo get a better sense of which area is popular, we create a map where the number of listings are normalized by the area. It looks like the south - Koloa-Poipu - is the clear winner. Because it is the smallest neighbourhood, the normalization has a greater impact on this area.\n\n# Normalize by area\n\ntotals_gm[\"N_per_area\"] = (\n    totals_gm[\"size\"] / (totals_gm.geometry.area) * 1e4\n)\n\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_1553/4157050995.py:4: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  totals_gm[\"size\"] / (totals_gm.geometry.area) * 1e4\n\n\n\n# Listings by neighbourhood, normalized by area\n\n# Needed to line up the colorbar properly\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\n# Create the figure/axes\nfig, ax = plt.subplots(figsize=(8, 8))\n\n#Create a nice, lined up colorbar axes (called \"cax\" here)\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.2)\n\n# Plot\ntotals_gm.plot(\n    ax=ax,\n    cax=cax,\n    column=\"N_per_area\",  \n    edgecolor=\"white\",\n    linewidth=0.5,\n    legend=True,\n    cmap=\"viridis\",\n)\n\n# NEW: Get the limits of the GeoDataFrame\nxmin, ymin, xmax, ymax = totals_gm.total_bounds\n\n# NEW: Set the xlims and ylims\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\n\n# Format\nax.set_axis_off()\nax.set_aspect(\"equal\")\n\n\n\n\nA different map without normalization is plotted. As expected, the North Shore Kauai is the most popular. Assuming the number of listings reflect demand, it looks like visitors may be flocking to these areas.\nFor a first-time vistor, the west side is not recommended, due to its fewer and spare listings.\n\n# Listings by neighbourhood (not normalized)\n\ntotals_gm.explore(\n    column=\"size\",  # Similar to plot(); specify the value column\n    cmap=\"viridis\",  # What color map do we want to use\n    tiles=\"CartoDB positron\",  # What basemap tiles do we want to use?\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n\n2.2 Data Exploration Plots\n1. Box Plot of Prices and Neighbourhoods\nPricing is a huge consideration in determining which airbnb listing to stay at. The below show box plots show the prices have a good number of outliars - which is to be expected of the hospitality industry, where the range of prices that people may be willing to pay is much wider than others.\nKoloa-Poipu has the highest average price, but the highest prices are found in North Shore and Kapaa-Wailua, which was the area with the third highest listings and located on the east side of the island. Waimea-Kekaha has the least variability in prices, but this is also due to having the least number of listings.\n\n# Price by neighbourhood\n\nplt.figure(figsize=(6,6))\nsns.boxplot(listings_kauai_gpd, x=\"neighbourhood_cleansed\", y=np.log(listings_kauai_gpd.price))\n\nplt.xlabel('Neighbourhood', fontsize=12)\nplt.ylabel('Price (natural log)', fontsize=12)\n\nplt.title('Airbnb Prices in Kauai Neighbourhoods', fontsize=16)\nplt.show()\n\n\n\n\n2. Heat Map of Room Type and Review Score\nThe below heat map looks at the relationship between the type of room offered and the overall review score left by the user. It looks like the room types available are entire home or private, and there seems to be a significant number of high review score rating between 4.5 and 5 for the entire home category.\n\n# Heat map of room types and their review scores\nalt.data_transformers.disable_max_rows()\n\nalt.Chart(listings_kauai_gpd).mark_rect().encode(\n    x=alt.X('review_scores_rating', bin=alt.Bin(maxbins=15)),\n    color='count()',\n    y=alt.Y('room_type'),\n)\n\n\n\n\n\n\n\n\n3. Heat Map of Room Type and Price\nThe second heat map adds more information. It looks like a significant number of listings are “entire home/apt” rather than just a private room. Most listings are “entire home / apt” and priced in the $100-$500 range per night. This makes Kauai a rather expensive destination.\nWe can draw a few assumptions: - Kauai airbnbs seem to provide more privacy and space - Or perhaps the properties are just built smaller as the real estate is pricey, and so providing just a “private room” is not really an option - If so, the airbnb industry in Kauai is less a side hustle for home owners / renters, but rather a hospitality business that requires one to manage properties and live in their own residence\n\n# Heat map of room types and their price\n\nalt.Chart(listings_kauai_gpd).mark_rect().encode(\n    x=alt.X('price', bin=alt.Bin(maxbins=15)),\n    color='count()',\n    y=alt.Y('room_type'),\n)\n\n\n\n\n\n\n\n\n4. Heat Map of Price and Review Score\nDoes price have a relationship with the review?\nThe below heat map looks similar to the previous map, which suggests the high number of 4.5-5.0 score ratings for the $100-$500 range reflects more the frequency of data points, rather than users feeling those properties are that much better deserve higher ratings than others.\n\n# Heat map of price and review\n\nalt.Chart(listings_kauai_gpd).mark_rect().encode(\n    x=alt.X('review_scores_rating', bin=alt.Bin(maxbins=15)),\n    color='count()',\n    y=alt.Y('price', bin=alt.Bin(maxbins=15)),\n)\n\n\n\n\n\n\n\n\n\n\n2.3 Plot of price cyclicality\n5. Plot of median price for 365 days\nTo understand the cyclicality of the prices in Hawaii’s hospitality industry, the median price of listings previously calculated is plotted here.\nThe end of the year holiday season has a clear spike in pricing from mid December to mid January. Interestingly, the price does not drop back to prior holiday season levels mid January to end of April. Afterwards, there is a bit of a lull until the summer holiday season, but prices are still not as high as January - April. After August, the prices clearly drop.\nThe smaller peaks in pricing throughout reflect cyclicality of prices for weekdays vs. week nights. The prices are clearly very sensitive to the time of the year.\nVisitors should consider the month of September to get the lowest price.\n\n# Calendar: Per day, mean price\n\n# Line chart of price vs date\nchart = calendar_grp.hvplot(x='date', y='price', kind=\"line\")\n\n# Vertical line + label for end of year holidays\nvline = hv.VLine(2023-12-25).opts(color=\"black\")\nlabel1 = hv.Text(\"2023-10-17\", 300, \"Low Season\", halign=\"center\")\nlabel2 = hv.Text(\"2023-12-25\", 350, \"Holiday Season\", halign=\"center\")\nlabel3 = hv.Text(\"2024-06-15\", 320, \"High Season\", halign=\"center\")\n\nfinal_chart = chart * vline * label1 * label2 * label3\nfinal_chart\n\n\n\n\n\n  \n\n\n\n\n\n\n2.4 Nearby venues\nTo understand which venue categories were appearing most frequently, a new dataframe was configured to see the occurence per category and sorted from greatest to smallest.\nUnsurprisingly, the beach, landmarks and outdoors, golf course, and restaurants (American and Hawaii) are the top 5 venue categories that are popular and near our our Airbnb listings.\nConsidering Kauai vacation costs are quite high, and would attract wealthier or more “luxurious” type vacations, it’s interesting that cheaper alcohol establishment - sports bar - was much ranked high as the 8th (since Python starts counting from 0, we can add 1 to the index to get the ranking) most frequent venue, while a hotel bar was ranked lower at 20th. This again may have more to do with the number of establishments - it is reasonable to assume there are more sports bars than hotel bars - rather than to assume that many more airbnb listings are near sports bars due to their popularity.\n\ncategory_counts = kauai_venues_clean['Category'].value_counts().reset_index()\ncategory_counts[:26]\n\n\n\n\n\n\n\n\nindex\nCategory\n\n\n\n\n0\nBeach\n2448\n\n\n1\nAmerican Restaurant\n1769\n\n\n2\nLandmarks and Outdoors\n780\n\n\n3\nGolf Course\n763\n\n\n4\nHawaiian Restaurant\n579\n\n\n5\nSwimming Pool\n536\n\n\n6\nMonument\n531\n\n\n7\nSports Bar\n512\n\n\n8\nVacation Rental\n483\n\n\n9\nCafé\n443\n\n\n10\nCoffee Shop\n420\n\n\n11\nConstruction\n361\n\n\n12\nBurger Joint\n331\n\n\n13\nHiking Trail\n327\n\n\n14\nBicycle Store\n256\n\n\n15\nScenic Lookout\n244\n\n\n16\nDeli\n234\n\n\n17\nCave\n219\n\n\n18\nPlayground\n202\n\n\n19\nHotel Bar\n200\n\n\n20\nLounge\n193\n\n\n21\nGrocery Store\n179\n\n\n22\nIce Cream Parlor\n176\n\n\n23\nItalian Restaurant\n170\n\n\n24\nTennis Court\n165\n\n\n25\nSushi Restaurant\n142\n\n\n\n\n\n\n\nNext, to see whether specific venues are having an impact, a subset of the listings data and the venue data is merged together to calculate the stats.\n\n# Merge selected listings data and venue data\nsubset = listings_kauai_gpd[['id','price']]\n\nmerged_df = pd.merge(subset, kauai_venues_clean, on='id', how='left') \nmerged_df\n\n\n\n\n\n\n\n\nid\nprice\nVenue\nCategory\n\n\n\n\n0\n152645\n110.0\nO'Hara Construction & Design\nConstruction\n\n\n1\n153304\n195.0\nO'Hara Construction & Design\nConstruction\n\n\n2\n153304\n195.0\nWyndham Bali Hai Villas\nSwimming Pool\n\n\n3\n153397\n285.0\nO'Hara Construction & Design\nConstruction\n\n\n4\n162600\n588.0\nCoconut's Fish Cafe\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n...\n\n\n14531\n975283100809274999\n399.0\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14532\n975283100809274999\n399.0\nNapali Brewing Co.\nBrewery\n\n\n14533\n975288623054648385\n299.0\nKorean Bar-B-Q\nBBQ Joint\n\n\n14534\n975288623054648385\n299.0\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14535\n975288623054648385\n299.0\nMema Thai Chinese Cuisine\nThai Restaurant\n\n\n\n\n14536 rows × 4 columns\n\n\n\n\n# Calcuate stats\ncategory_stats = venue_merge.groupby('Venue').agg(Frequency=('Venue', 'size'), MedPrice=('price', 'median')).reset_index()\ncategory_stats = category_stats.sort_values(by='Frequency', ascending=False)\ncategory_stats.head()\n\n\n\n\n\n\n\n\nVenue\nFrequency\nMedPrice\n\n\n\n\n310\nWyndham Bali Hai Villas\n536\n249.0\n\n\n228\nPrinceville Makai Golf Club\n512\n240.0\n\n\n181\nMauna Kai Condo\n482\n220.0\n\n\n257\nSleeping Giant Grill\n383\n248.0\n\n\n186\nNanea Restaurant and Bar\n379\n250.0\n\n\n\n\n\n\n\nThere is a great range in prices and categories. The list below would be useful for travellers though in picking accommodations and deciding their activities in Kauai. The assumption is that the listings are frequently located nearby these venues for reasons that the airbnb users consider when choosing where to stay. A straightforward example is the Princeville Makai Golf Club - many people fly to Kauai to take advantage of the beautiful golf course.\nWe will not include the venue data in the machine learning model as it would need thorough category cleansing before use.\n\ncategory_stats = category_stats.sort_values(by='MedPrice', ascending=False)\n\n# Trim to see specific venues where frequency is greater than 100\nvalid2 = (category_stats['Frequency'] &gt; 100)\ntrim2 = category_stats.loc[valid2]\ntrim2 = trim2.sort_values(by='Frequency', ascending=False)\n\n# Add back category data\nven_cat = merged_df[['Venue', 'Category']]\ntrim2 = pd.merge(trim2, ven_cat, on='Venue', how='left')\ntrim2 = trim2.drop_duplicates(subset=['Venue']).reset_index(drop=True)\ntrim2\n\n\n\n\n\n\n\n\nVenue\nFrequency\nMedPrice\nCategory\n\n\n\n\n0\nWyndham Bali Hai Villas\n536\n249.0\nSwimming Pool\n\n\n1\nPrinceville Makai Golf Club\n512\n240.0\nGolf Course\n\n\n2\nMauna Kai Condo\n482\n220.0\nVacation Rental\n\n\n3\nSleeping Giant Grill\n383\n248.0\nHawaiian Restaurant\n\n\n4\nNanea Restaurant and Bar\n379\n250.0\nAmerican Restaurant\n\n\n5\nO'Hara Construction & Design\n349\n263.0\nConstruction\n\n\n6\nBrennecke's Beach\n329\n333.0\nBeach\n\n\n7\nKalapaki Joe's Poipu\n314\n335.0\nSports Bar\n\n\n8\nHukilau Lanai\n313\n264.0\nAmerican Restaurant\n\n\n9\nIsland Country Markets #93\n290\n261.0\nCoffee Shop\n\n\n10\nKiahuna Beach\n265\n379.0\nBeach\n\n\n11\nThe Pacific Ocean\n255\n239.0\nLandmarks and Outdoors\n\n\n12\nPedego Electric Bikes Poipu\n252\n329.5\nBicycle Store\n\n\n13\nMakai Grill\n249\n239.0\nAmerican Restaurant\n\n\n14\nKauai Plantatin Railway\n239\n239.0\nLandmarks and Outdoors\n\n\n15\nCathedral Beach\n235\n240.0\nBeach\n\n\n16\nMakahuena Point\n231\n367.0\nMonument\n\n\n17\nWaipouli Delicatessen & Restaurant\n230\n456.0\nDeli\n\n\n18\nTurtle Cove\n219\n264.0\nCave\n\n\n19\nPoipu Beach Lava rocks\n214\n379.0\nBeach\n\n\n20\nSouth Point\n213\n383.0\nHiking Trail\n\n\n21\nLittle Fish Coffee\n208\n361.0\nCafé\n\n\n22\nOasis on the Beach\n205\n402.0\nAmerican Restaurant\n\n\n23\nHappy Talk Bar & Restaurant\n198\n402.0\nSports Bar\n\n\n24\nAnini Beach\n196\n279.5\nScenic Lookout\n\n\n25\nPrinceville Playground\n187\n215.0\nPlayground\n\n\n26\nCoconut's Fish Cafe\n186\n400.5\nHawaiian Restaurant\n\n\n27\nSunset at the Cliffs\n180\n275.0\nLandmarks and Outdoors\n\n\n28\nPoipu Shopping Village\n178\n431.0\nBurger Joint\n\n\n29\nShutters Lounge at Kauai Beach Resort\n176\n226.0\nHotel Bar\n\n\n30\nKeoki's Paradise\n169\n441.0\nAmerican Restaurant\n\n\n31\nKalapaki Beach\n167\n458.0\nBeach\n\n\n32\nHanalei Bay Resort tennis center\n165\n411.0\nTennis Court\n\n\n33\nImua Coffee Roasters\n162\n228.5\nCafé\n\n\n34\nNaupaka Terrace Restaurant\n160\n238.5\nAmerican Restaurant\n\n\n35\nHideaways Pizza Pub\n156\n302.5\nItalian Restaurant\n\n\n36\nKiahuna Golf Club\n150\n425.0\nGolf Course\n\n\n37\nRed Salt\n142\n343.0\nSushi Restaurant\n\n\n38\nLava Lava Beach Club - Kauai\n122\n235.0\nBar\n\n\n39\nPrinceville Bluffs\n121\n259.0\nMonument\n\n\n40\nLawa i Beach\n121\n276.0\nBeach\n\n\n41\nSea Lodge Beach\n121\n285.0\nBeach\n\n\n42\nDuke's\n121\n458.0\nAmerican Restaurant\n\n\n43\nQueen's Bath\n121\n318.0\nMonument\n\n\n44\nHideaways Beach\n121\n378.0\nBeach\n\n\n45\nBeach House Restaurant\n120\n277.0\nAmerican Restaurant\n\n\n46\nFoodland Waipouli\n116\n487.0\nGrocery Store\n\n\n47\nGrand Club\n114\n355.5\nLounge\n\n\n48\nSacred Fishing Grounds\n109\n329.0\nBeach\n\n\n49\nBaby Beach Bungalow Poipu Kauai\n108\n296.0\nBeach\n\n\n50\nLappert's Hawaii\n106\n315.0\nCoffee Shop"
  },
  {
    "objectID": "analysis/final-project.html#train-a-random-forest-on-the-data-listings-calendar",
    "href": "analysis/final-project.html#train-a-random-forest-on-the-data-listings-calendar",
    "title": "Airbnb Pricing Exploration and Modelling - Kauai, Hawaii",
    "section": "3.1 Train a Random Forest on the data (listings + calendar)",
    "text": "3.1 Train a Random Forest on the data (listings + calendar)\n\n3.1.1 Preprocessing\nTo find a model that will predict the prices of listings, I create a machine learning model utilizing the previous dataset. The data is checked using functions such as looking at the statistical summary and counting the number of nas to figure what what preprocessing is needed. Afterwards a pipeline is created to handle numerical value columns and categorical value columns.\n\n# look at summary statistics\nlistings_kauai_gpd.describe()\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_listings_count\nlatitude\nlongitude\naccommodates\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\ncount\n5.374000e+03\n5.374000e+03\n5374.000000\n5374.000000\n5374.000000\n5374.000000\n4767.000000\n5349.000000\n5374.000000\n5374.000000\n5374.000000\n3935.000000\n3933.000000\n3933.000000\n3933.000000\n3933.000000\n3933.000000\n3935.000000\n\n\nmean\n3.858371e+17\n1.967164e+08\n318.085225\n22.063652\n-159.430920\n5.147376\n1.983218\n2.710600\n455.457760\n10.416263\n25.351321\n4.782755\n4.795372\n4.796242\n4.844439\n4.815675\n4.885477\n1.050038\n\n\nstd\n3.983683e+17\n1.758776e+08\n602.599661\n0.145281\n0.067343\n2.514550\n1.051412\n1.522949\n873.957766\n36.664834\n50.890054\n0.349420\n0.373735\n0.316880\n0.313340\n0.357005\n0.224364\n1.109448\n\n\nmin\n1.323800e+04\n7.984000e+03\n1.000000\n21.868660\n-159.714620\n1.000000\n1.000000\n1.000000\n0.000000\n1.000000\n0.000000\n0.000000\n1.000000\n1.000000\n1.000000\n1.000000\n1.000000\n0.010000\n\n\n25%\n3.771922e+07\n3.907322e+07\n8.000000\n21.883481\n-159.478199\n4.000000\n1.000000\n2.000000\n225.000000\n1.000000\n0.000000\n4.710000\n4.750000\n4.730000\n4.820000\n4.780000\n4.860000\n0.270000\n\n\n50%\n5.413300e+07\n1.118173e+08\n73.000000\n22.055690\n-159.459800\n4.000000\n2.000000\n2.000000\n303.000000\n2.000000\n5.000000\n4.890000\n4.910000\n4.890000\n4.950000\n4.940000\n4.950000\n0.640000\n\n\n75%\n7.977253e+17\n3.896978e+08\n303.000000\n22.220300\n-159.347262\n6.000000\n2.000000\n3.000000\n466.750000\n3.000000\n25.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n1.460000\n\n\nmax\n9.770428e+17\n5.350458e+08\n2766.000000\n22.229090\n-159.302780\n16.000000\n11.000000\n18.000000\n25000.000000\n185.000000\n645.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n9.070000\n\n\n\n\n\n\n\n\n# look at number of listings\nlen(listings_kauai_gpd)\n\n5374\n\n\n\n# check if we need to reformat data\ndata_types = listings_kauai_gpd.dtypes\ndata_types\n\nid                                 int64\nhost_id                            int64\nhost_since                        object\nhost_response_rate                object\nhost_acceptance_rate              object\nhost_is_superhost                 object\nhost_listings_count              float64\nhost_identity_verified            object\nneighbourhood_cleansed            object\nneighbourhood_group_cleansed      object\nlatitude                         float64\nlongitude                        float64\nproperty_type                     object\nroom_type                         object\naccommodates                       int64\nbathrooms_text                    object\nbedrooms                         float64\nbeds                             float64\nprice                            float64\nminimum_nights                     int64\nnumber_of_reviews                  int64\nfirst_review                      object\nlast_review                       object\nreview_scores_rating             float64\nreview_scores_accuracy           float64\nreview_scores_cleanliness        float64\nreview_scores_checkin            float64\nreview_scores_communication      float64\nreview_scores_location           float64\nreviews_per_month                float64\ngeometry                        geometry\ndtype: object\n\n\n\n# look at nas\nnan_count = listings_kauai_gpd.isna().sum()\nnan_count\n\nid                                 0\nhost_id                            0\nhost_since                         0\nhost_response_rate               172\nhost_acceptance_rate             108\nhost_is_superhost                  0\nhost_listings_count                0\nhost_identity_verified             0\nneighbourhood_cleansed             0\nneighbourhood_group_cleansed       0\nlatitude                           0\nlongitude                          0\nproperty_type                      0\nroom_type                          0\naccommodates                       0\nbathrooms_text                     0\nbedrooms                           0\nbeds                               0\nprice                              0\nminimum_nights                     0\nnumber_of_reviews                  0\nfirst_review                    1437\nlast_review                     1437\nreview_scores_rating               0\nreview_scores_accuracy             0\nreview_scores_cleanliness          0\nreview_scores_checkin              0\nreview_scores_communication        0\nreview_scores_location             0\nreviews_per_month                  0\ngeometry                           0\ndtype: int64\n\n\n\n# trim data where prices are $50 - $10,000\nvalid = (listings_kauai_gpd['price'] &gt; 20) & (listings_kauai_gpd['price'] &lt; 10000)\ntrim = listings_kauai_gpd.loc[valid]\n\n\n# drop cols and nas\ncols = [\"price\", \"geometry\",\n    \"host_response_rate\",\n    \"host_acceptance_rate\",\n    \"host_listings_count\",\n    \"neighbourhood_cleansed\",\n    \"bathrooms_text\",\n    \"bedrooms\",\n    \"accommodates\",\n    \"beds\",\n    \"minimum_nights\",\n    \"number_of_reviews\",\n    \"review_scores_rating\",\n    \"review_scores_accuracy\",\n    \"review_scores_cleanliness\",\n    \"review_scores_checkin\",\n    \"review_scores_communication\",\n    \"review_scores_location\",\n    \"reviews_per_month\",\n    \"room_type\", \"property_type\", \"host_is_superhost\", \"host_identity_verified\"]\n\ntrim = trim[cols].dropna()\nlen(trim)\n\n5138\n\n\n\n# change numerical column values to float\n\n# trim[['bathrooms_text']] = trim[['bathrooms_text']].astype(float)\ntrim['bathrooms'] = trim['bathrooms_text'].str.extract('(\\d+)')\ntrim = trim.drop('bathrooms_text', axis=1)\n\n\n# remove % and convert to float\ntrim['host_response_rate'] = pd.to_numeric(trim['host_response_rate'].str.replace('%', ''), errors='coerce') / 100.0\ntrim['host_acceptance_rate'] = pd.to_numeric(trim['host_acceptance_rate'].str.replace('%', ''), errors='coerce') / 100.0\n\nAttributeError: Can only use .str accessor with string values!\n\n\n\n# drop nas for column superhost - this is a categorical column\ntrim = trim.dropna(subset=['host_is_superhost'])\n\n# replace nas with median for the numeric columns\ntrim = trim.fillna(trim.median())\n\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/2743277231.py:5: FutureWarning: The default value of numeric_only in GeoDataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  trim = trim.fillna(trim.median())\n\n\n\n#Set up pipeline\n\n#Preprocessing\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler, OneHotEncoder\nscaler = StandardScaler()\n\nfrom sklearn.compose import ColumnTransformer\n\n# Models\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Model selection\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n\n\n# Numerical columns\nnum_cols =  [\n    \"host_response_rate\",\n    \"host_acceptance_rate\",\n    \"host_listings_count\",\n    \"bathrooms\",\n    \"bedrooms\",\n    \"accommodates\",\n    \"beds\",\n    \"minimum_nights\",\n    \"number_of_reviews\",\n    \"review_scores_rating\",\n    \"review_scores_accuracy\",\n    \"review_scores_cleanliness\",\n    \"review_scores_checkin\",\n    \"review_scores_communication\",\n    \"review_scores_location\",\n    \"reviews_per_month\",\n]\n\n# Categorical columns\ncat_cols = [\"neighbourhood_cleansed\", \"room_type\", \"property_type\", \"host_is_superhost\", \"host_identity_verified\"]\n\n\n# Initialize the OHE transformer\nohe = OneHotEncoder()\n\n\n# Transform numerical and categorical columns separately\ntransformer = ColumnTransformer(\n    transformers=[\n        (\"num\", StandardScaler(), num_cols),\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), cat_cols),\n    ]\n)\n\n\n# Initialize the pipeline\n## NOTE: only using 5 estimators to run in a reasonable time\npipe = make_pipeline(\n    transformer, RandomForestRegressor(n_estimators=5, \n                                       random_state=42)\n)\n\n\nmodel = pipe['randomforestregressor']\n\n\n\n3.1.2 Training\n\nUse a 70/30% training/test split and predict the log of the sales price.\nUse GridSearchCV to perform a k-fold cross validation that optimize 2 hyperparameters of the RandomForestRegressor\nAfter fitting your model and finding the optimal hyperparameters, you should evaluate the score (R-squared) on the test set (the original 30% sample withheld)\n\n\n# Split training and test data 70/30\ntrain_set, test_set = train_test_split(trim, test_size=0.3, random_state=42)\n\n\n# Create the target labels: log of sale price\ny_train = np.log(train_set[\"price\"])\ny_test = np.log(test_set[\"price\"])\n\n\n# Create grid of parameters to search\npipe.named_steps\nmodel_step = \"randomforestregressor\"\nparam_grid = {\n    f\"{model_step}__n_estimators\": [5, 10, 15, 20], # Reducing as run time is very long\n    f\"{model_step}__max_depth\": [2, 3, 5, 7],\n}\n\n\n# Create the grid and use 3-fold CV\ngrid = GridSearchCV(pipe, param_grid, cv=3, verbose=1)\n\n\n# Run the search\ngrid.fit(train_set, y_train)\n\nFitting 3 folds for each of 16 candidates, totalling 48 fits\n\n\nGridSearchCV(cv=3,\n             estimator=Pipeline(steps=[('columntransformer',\n                                        ColumnTransformer(transformers=[('num',\n                                                                         StandardScaler(),\n                                                                         ['host_response_rate',\n                                                                          'host_acceptance_rate',\n                                                                          'host_listings_count',\n                                                                          'bathrooms',\n                                                                          'bedrooms',\n                                                                          'accommodates',\n                                                                          'beds',\n                                                                          'minimum_nights',\n                                                                          'number_of_reviews',\n                                                                          'review_scores_rating',\n                                                                          'review_scores_accuracy',\n                                                                          'review_scores_cleanliness',\n                                                                          'rev...\n                                                                        ('cat',\n                                                                         OneHotEncoder(handle_unknown='ignore'),\n                                                                         ['neighbourhood_cleansed',\n                                                                          'room_type',\n                                                                          'property_type',\n                                                                          'host_is_superhost',\n                                                                          'host_identity_verified'])])),\n                                       ('randomforestregressor',\n                                        RandomForestRegressor(n_estimators=5,\n                                                              random_state=42))]),\n             param_grid={'randomforestregressor__max_depth': [2, 3, 5, 7],\n                         'randomforestregressor__n_estimators': [5, 10, 15,\n                                                                 20]},\n             verbose=1)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GridSearchCVGridSearchCV(cv=3,\n             estimator=Pipeline(steps=[('columntransformer',\n                                        ColumnTransformer(transformers=[('num',\n                                                                         StandardScaler(),\n                                                                         ['host_response_rate',\n                                                                          'host_acceptance_rate',\n                                                                          'host_listings_count',\n                                                                          'bathrooms',\n                                                                          'bedrooms',\n                                                                          'accommodates',\n                                                                          'beds',\n                                                                          'minimum_nights',\n                                                                          'number_of_reviews',\n                                                                          'review_scores_rating',\n                                                                          'review_scores_accuracy',\n                                                                          'review_scores_cleanliness',\n                                                                          'rev...\n                                                                        ('cat',\n                                                                         OneHotEncoder(handle_unknown='ignore'),\n                                                                         ['neighbourhood_cleansed',\n                                                                          'room_type',\n                                                                          'property_type',\n                                                                          'host_is_superhost',\n                                                                          'host_identity_verified'])])),\n                                       ('randomforestregressor',\n                                        RandomForestRegressor(n_estimators=5,\n                                                              random_state=42))]),\n             param_grid={'randomforestregressor__max_depth': [2, 3, 5, 7],\n                         'randomforestregressor__n_estimators': [5, 10, 15,\n                                                                 20]},\n             verbose=1)estimator: PipelinePipeline(steps=[('columntransformer',\n                 ColumnTransformer(transformers=[('num', StandardScaler(),\n                                                  ['host_response_rate',\n                                                   'host_acceptance_rate',\n                                                   'host_listings_count',\n                                                   'bathrooms', 'bedrooms',\n                                                   'accommodates', 'beds',\n                                                   'minimum_nights',\n                                                   'number_of_reviews',\n                                                   'review_scores_rating',\n                                                   'review_scores_accuracy',\n                                                   'review_scores_cleanliness',\n                                                   'review_scores_checkin',\n                                                   'review_scores_communication',\n                                                   'review_scores_location',\n                                                   'reviews_per_month']),\n                                                 ('cat',\n                                                  OneHotEncoder(handle_unknown='ignore'),\n                                                  ['neighbourhood_cleansed',\n                                                   'room_type', 'property_type',\n                                                   'host_is_superhost',\n                                                   'host_identity_verified'])])),\n                ('randomforestregressor',\n                 RandomForestRegressor(n_estimators=5, random_state=42))])columntransformer: ColumnTransformerColumnTransformer(transformers=[('num', StandardScaler(),\n                                 ['host_response_rate', 'host_acceptance_rate',\n                                  'host_listings_count', 'bathrooms',\n                                  'bedrooms', 'accommodates', 'beds',\n                                  'minimum_nights', 'number_of_reviews',\n                                  'review_scores_rating',\n                                  'review_scores_accuracy',\n                                  'review_scores_cleanliness',\n                                  'review_scores_checkin',\n                                  'review_scores_communication',\n                                  'review_scores_location',\n                                  'reviews_per_month']),\n                                ('cat', OneHotEncoder(handle_unknown='ignore'),\n                                 ['neighbourhood_cleansed', 'room_type',\n                                  'property_type', 'host_is_superhost',\n                                  'host_identity_verified'])])num['host_response_rate', 'host_acceptance_rate', 'host_listings_count', 'bathrooms', 'bedrooms', 'accommodates', 'beds', 'minimum_nights', 'number_of_reviews', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'reviews_per_month']StandardScalerStandardScaler()cat['neighbourhood_cleansed', 'room_type', 'property_type', 'host_is_superhost', 'host_identity_verified']OneHotEncoderOneHotEncoder(handle_unknown='ignore')RandomForestRegressorRandomForestRegressor(n_estimators=5, random_state=42)\n\n\n\n# The best hyper parameters\ngrid.best_params_\n\n{'randomforestregressor__max_depth': 7,\n 'randomforestregressor__n_estimators': 20}\n\n\n\n# Random forest model pipeline with optimized depth and estimators\nforest_pipe = make_pipeline(\n    transformer, \n    RandomForestRegressor(n_estimators=20, max_depth=7, random_state=42), \n)\n\n\n# Run the k-fold cross validation\nscores = cross_val_score(\n    forest_pipe,\n    train_set,\n    y_train,\n    cv=3,\n)\n\n\n# Report\nprint(\"R^2 scores = \", scores)\nprint(\"Scores mean = \", scores.mean())\nprint(\"Score std dev = \", scores.std())\n\nR^2 scores =  [0.65066977 0.60736221 0.61580208]\nScores mean =  0.6246113562692326\nScore std dev =  0.01874546441942987\n\n\n\n# Fit a random forest\nprint(\"Random forest\")\nforest_pipe.fit(train_set, y_train)\n\n# Print the training score\ntraining_score = forest_pipe.score(train_set, y_train)\nprint(f\"Training Score = {training_score}\")\n\n# Print the test score\ntest_score = forest_pipe.score(test_set, y_test)\nprint(f\"Test Score = {test_score}\")\n\nRandom forest\nTraining Score = 0.7024855326116177\nTest Score = 0.6788891721934799"
  },
  {
    "objectID": "analysis/final-project.html#calculate-the-percent-error-of-model-predictions",
    "href": "analysis/final-project.html#calculate-the-percent-error-of-model-predictions",
    "title": "Airbnb Pricing Exploration and Modelling - Kauai, Hawaii",
    "section": "3.2 Calculate the percent error of model predictions",
    "text": "3.2 Calculate the percent error of model predictions\n\n# Create dataset of test set\nX = trim.loc[test_set.index]\n\n# Make the predictions\nlog_predictions = forest_pipe.predict(test_set)\n\n# Convert the predicted test values from log\nX['prediction'] = np.exp(log_predictions)\n\n\n# Calculate percent error\n\nX[\"pct_error\"] = ((X[\"prediction\"]-(X[\"price\"]))/X[\"price\"])*100\nX.head()\n\n\n\n\n\n\n\n\nprice\ngeometry\nhost_response_rate\nhost_acceptance_rate\nhost_listings_count\nneighbourhood_cleansed\nbedrooms\naccommodates\nbeds\nminimum_nights\nnumber_of_reviews\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\nroom_type\nproperty_type\nhost_is_superhost\nhost_identity_verified\nbathrooms\nprediction\npct_error\n\n\n\n\n895\n975.0\nPOINT (-159.30537 22.14641)\n1.00\n0.99\n73.0\nKapaa-Wailua\n5.0\n14\n8.0\n5\n7\n3.86\n4.29\n4.86\n4.57\n4.29\n4.43\n0.12\nEntire home/apt\nEntire home\nf\nt\n5\n1177.225162\n20.741042\n\n\n1043\n477.0\nPOINT (-159.32060 22.06245)\n0.94\n0.99\n168.0\nKapaa-Wailua\n2.0\n6\n3.0\n3\n10\n5.00\n5.00\n5.00\n4.90\n4.80\n4.90\n0.18\nEntire home/apt\nEntire condo\nf\nt\n3\n444.374645\n-6.839697\n\n\n4194\n240.0\nPOINT (-159.48115 22.22414)\n0.95\n0.15\n190.0\nNorth Shore Kauai\n2.0\n6\n3.0\n2\n1\n5.00\n5.00\n5.00\n5.00\n5.00\n5.00\n1.00\nEntire home/apt\nEntire rental unit\nf\nt\n2\n252.047241\n5.019684\n\n\n853\n255.0\nPOINT (-159.49446 22.22018)\n0.83\n1.00\n2.0\nNorth Shore Kauai\n2.0\n4\n2.0\n3\n74\n4.73\n4.76\n4.57\n4.88\n4.82\n4.88\n1.20\nEntire home/apt\nEntire condo\nf\nf\n1\n237.130747\n-7.007550\n\n\n2167\n383.0\nPOINT (-159.46511 21.87851)\n0.98\n0.99\n303.0\nKoloa-Poipu\n1.0\n4\n2.0\n1\n2\n5.00\n5.00\n5.00\n4.50\n5.00\n5.00\n0.09\nEntire home/apt\nEntire home/apt\nf\nt\n2\n392.422861\n2.460277"
  },
  {
    "objectID": "analysis/final-project.html#explore-airbnb-data",
    "href": "analysis/final-project.html#explore-airbnb-data",
    "title": "Airbnb Pricing Exploration and Modelling - Kauai, Hawaii",
    "section": "",
    "text": "from matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nimport hvplot.pandas\n\nnp.random.seed(42)\n\n# Show all columns\npd.options.display.max_columns = 999\n\n# APIs\nimport requests\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe load in 3 datasets that provide the relevant airbnb listings data. - 1. Neighbourhoods: the shape file of Hawaii’s neighbourhoods - 2. Listings: listings scraped from September 2023 - 3. Calendar: price per listing per each of the 365 days from scraped date\n\n\nThe neighbourhoods are grouped by the Hawaii islands, and each island has neighbourhoods within.\n\n# Neighbourhoods\nnh = gpd.read_file(\"./data/neighbourhoods.geojson\")\nnh #ESPG 4326\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\ngeometry\n\n\n\n\n0\nKoolauloa\nHonolulu\nMULTIPOLYGON (((-158.00347 21.69941, -158.0028...\n\n\n1\nNorth Shore Oahu\nHonolulu\nMULTIPOLYGON (((-158.02224 21.69103, -158.0219...\n\n\n2\nWaianae\nHonolulu\nMULTIPOLYGON (((-158.26744 21.57220, -158.2673...\n\n\n3\nKoolaupoko\nHonolulu\nMULTIPOLYGON (((-157.83830 21.53446, -157.8381...\n\n\n4\nCentral Oahu\nHonolulu\nMULTIPOLYGON (((-157.92108 21.53219, -157.9209...\n\n\n5\nNorth Shore Kauai\nKauai\nMULTIPOLYGON (((-159.40448 22.22918, -159.4044...\n\n\n6\nKapaa-Wailua\nKauai\nMULTIPOLYGON (((-159.33158 22.19300, -159.3313...\n\n\n7\nWaimea-Kekaha\nKauai\nMULTIPOLYGON (((-159.69701 22.16169, -159.6970...\n\n\n8\nLihue\nKauai\nMULTIPOLYGON (((-159.45149 22.06189, -159.4476...\n\n\n9\nHanapepe-Eleele\nKauai\nMULTIPOLYGON (((-159.50306 22.05268, -159.4991...\n\n\n10\nKoloa-Poipu\nKauai\nMULTIPOLYGON (((-159.49322 21.97766, -159.4922...\n\n\n11\nMolokai\nMaui\nMULTIPOLYGON (((-157.19720 21.21427, -157.1969...\n\n\n12\nLahaina\nMaui\nMULTIPOLYGON (((-156.62697 21.02254, -156.6265...\n\n\n13\nWailuku-Kahului\nMaui\nMULTIPOLYGON (((-156.58237 21.01779, -156.5821...\n\n\n14\nPaia-Haiku\nMaui\nMULTIPOLYGON (((-156.32796 20.94421, -156.3278...\n\n\n15\nLanai\nMaui\nMULTIPOLYGON (((-156.98807 20.92921, -156.9880...\n\n\n16\nHana\nMaui\nMULTIPOLYGON (((-156.19115 20.88776, -156.1909...\n\n\n17\nKihei-Makena\nMaui\nMULTIPOLYGON (((-156.55399 20.83973, -156.5515...\n\n\n18\nKahoolawe\nMaui\nMULTIPOLYGON (((-156.57218 20.60308, -156.5721...\n\n\n19\nHamakua\nHawaii\nMULTIPOLYGON (((-155.69984 20.18567, -155.6994...\n\n\n20\nSouth Kohala\nHawaii\nMULTIPOLYGON (((-155.70545 20.11025, -155.6994...\n\n\n21\nNorth Hilo\nHawaii\nMULTIPOLYGON (((-155.28469 20.01916, -155.2845...\n\n\n22\nSouth Hilo\nHawaii\nMULTIPOLYGON (((-155.12853 19.90004, -155.1283...\n\n\n23\nNorth Kona\nHawaii\nMULTIPOLYGON (((-155.88483 19.91049, -155.8837...\n\n\n24\nNorth Kohala\nHawaii\nMULTIPOLYGON (((-155.87222 20.26316, -155.8719...\n\n\n25\nPuna\nHawaii\nMULTIPOLYGON (((-154.99055 19.71630, -154.9904...\n\n\n26\nKau\nHawaii\nMULTIPOLYGON (((-155.35286 19.58976, -155.3524...\n\n\n27\nSouth Kona\nHawaii\nMULTIPOLYGON (((-155.95546 19.51061, -155.9551...\n\n\n28\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.87518 21.45657, -157.8749...\n\n\n29\nEwa\nHonolulu\nMULTIPOLYGON (((-158.04696 21.41613, -158.0436...\n\n\n30\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.88030 21.31254, -157.8803...\n\n\n31\nPrimary Urban Center\nHonolulu\nMULTIPOLYGON (((-157.96070 21.36958, -157.9608...\n\n\n32\nEast Honolulu\nHonolulu\nMULTIPOLYGON (((-157.65279 21.30893, -157.6527...\n\n\n33\nMakawao-Pukalani-Kula\nMaui\nMULTIPOLYGON (((-156.40127 20.82874, -156.3978...\n\n\n\n\n\n\n\n\n\n\nWe load in the listings data that was scraped from airbnb in September 2023. It includes all relevant listings and its associated details, such as host rating, property and property rating, posted available from scraped date to a year out (365 days out). This will be our main data source file.\n\n# Listings\nlistings = pd.read_csv(\"./data/listings_sep_23.csv.gz\")\n\nDue to our future API usage, we want to limit the number of listings to analyze for the project. This scope of this analysis will be contained to one island - the island of Kauai, known to be the prettiest island of Hawaii. In order to make sure we have enough data, we group the listings per the island. It looks like there are 5364 listings for Kauai.\n\n# Listings per neighbourhood\nnh_grp = listings.groupby(\"neighbourhood_group_cleansed\").size()\nnh_grp # I will analyze neighbourhood group Kauai: 5374 listings\n\nneighbourhood_group_cleansed\nHawaii       8223\nHonolulu     9573\nKauai        5374\nMaui        10169\ndtype: int64\n\n\nWe subset the listings data for the airbnb properties located in Kauai.\n\n# Subset listings for the island of Kauai\nlistings_kauai = listings.loc[listings[\"neighbourhood_group_cleansed\"] == \"Kauai\"].reset_index(drop=True)\nlistings_kauai\n\n\n\n\n\n\n\n\nid\nlisting_url\nscrape_id\nlast_scraped\nsource\nname\ndescription\nneighborhood_overview\npicture_url\nhost_id\nhost_url\nhost_name\nhost_since\nhost_location\nhost_about\nhost_response_time\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_thumbnail_url\nhost_picture_url\nhost_neighbourhood\nhost_listings_count\nhost_total_listings_count\nhost_verifications\nhost_has_profile_pic\nhost_identity_verified\nneighbourhood\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms\nbathrooms_text\nbedrooms\nbeds\namenities\nprice\nminimum_nights\nmaximum_nights\nminimum_minimum_nights\nmaximum_minimum_nights\nminimum_maximum_nights\nmaximum_maximum_nights\nminimum_nights_avg_ntm\nmaximum_nights_avg_ntm\ncalendar_updated\nhas_availability\navailability_30\navailability_60\navailability_90\navailability_365\ncalendar_last_scraped\nnumber_of_reviews\nnumber_of_reviews_ltm\nnumber_of_reviews_l30d\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreview_scores_value\nlicense\ninstant_bookable\ncalculated_host_listings_count\ncalculated_host_listings_count_entire_homes\ncalculated_host_listings_count_private_rooms\ncalculated_host_listings_count_shared_rooms\nreviews_per_month\n\n\n\n\n0\n152645\nhttps://www.airbnb.com/rooms/152645\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.54 · 1 bedroom · 1 b...\nOur Studio has ceramic tiled floors and a larg...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nNaN\nNorth Shore Kauai\nKauai\n22.220420\n-159.477540\nEntire condo\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"F...\n$110.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n1\n7\n14\n133\n2023-09-10\n206\n16\n1\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n4.69\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n1.40\n\n\n1\n153304\nhttps://www.airbnb.com/rooms/153304\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.64 · 2 bedrooms · 2 ...\nThe condo has ceramic tile flooring throughout...\nSandpiper Village is centrally located within ...\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nPrinceville, Hawaii, United States\nNorth Shore Kauai\nKauai\n22.222660\n-159.478040\nEntire condo\nEntire home/apt\n6\nNaN\n2 baths\n2.0\n2.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"F...\n$195.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n5\n8\n13\n136\n2023-09-10\n142\n15\n1\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n4.69\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n0.96\n\n\n2\n153397\nhttps://www.airbnb.com/rooms/153397\n20230910055919\n2023-09-10\ncity scrape\nCondo in Princeville · ★4.74 · 3 bedrooms · 4 ...\n3 BDRM 3 Bath w/ Queen Airbed- Sleeps 8 - Tile...\nNaN\nhttps://a0.muscache.com/pictures/969894/71ff7f...\n710680\nhttps://www.airbnb.com/users/show/710680\nKarl&Rachel\n2011-06-16\nLihue, HI\nMy wife, Rachel, and I first visited Kauai in ...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/710680/profil...\nhttps://a0.muscache.com/im/users/710680/profil...\nKauaʻi\n3.0\n3.0\n['email', 'phone']\nt\nf\nNaN\nNorth Shore Kauai\nKauai\n22.220970\n-159.478040\nEntire condo\nEntire home/apt\n8\nNaN\n3 baths\n3.0\n4.0\n[\"Hair dryer\", \"Hot water\", \"Pantene shampoo\",...\n$285.00\n3\n730\n3\n3\n730\n730\n3.0\n730.0\nNaN\nt\n0\n0\n3\n81\n2023-09-10\n20\n2\n0\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n4.79\n540150210071, TA-209-998-0288-01\nf\n3\n3\n0\n0\n0.15\n\n\n3\n162600\nhttps://www.airbnb.com/rooms/162600\n20230910055919\n2023-09-11\ncity scrape\nCondo in Kapaa · ★4.95 · 2 bedrooms · 3 beds ·...\nAt the forefront of East Shore accommodation i...\nNaN\nhttps://a0.muscache.com/pictures/prohost-api/H...\n756093\nhttps://www.airbnb.com/users/show/756093\nKaua’i\n2011-06-28\nHawaii, United States\nKauai Exclusive Management. A locally owned an...\nwithin an hour\n99%\n96%\nt\nhttps://a0.muscache.com/im/pictures/user/6dec4...\nhttps://a0.muscache.com/im/pictures/user/6dec4...\nKauaʻi\n75.0\n132.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.061740\n-159.320520\nEntire condo\nEntire home/apt\n6\nNaN\n2.5 baths\n2.0\n3.0\n[\"Refrigerator\", \"Hair dryer\", \"BBQ grill\", \"H...\n$588.00\n1\n1125\n3\n3\n1125\n1125\n3.0\n1125.0\nNaN\nt\n3\n4\n27\n112\n2023-09-11\n20\n1\n0\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n4.75\n430080010022\nf\n75\n75\n0\n0\n0.19\n\n\n4\n13238\nhttps://www.airbnb.com/rooms/13238\n20230910055919\n2023-09-11\ncity scrape\nCondo in Princeville · ★4.48 · Studio · 1 bed ...\nOur place is in the Princeville Resort facing ...\nLocated in Princeville Resort. Beautiful Homes...\nhttps://a0.muscache.com/pictures/29269565/35ca...\n51647\nhttps://www.airbnb.com/users/show/51647\nAnnie/Greg\n2009-11-05\nNaN\nAnnie and Greg Fry from Encinitas. We like to...\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/users/51647/profile...\nhttps://a0.muscache.com/im/users/51647/profile...\nKauaʻi\n2.0\n3.0\n['email', 'phone']\nt\nf\nPrinceville, Hawaii, United States\nNorth Shore Kauai\nKauai\n22.217890\n-159.471840\nEntire condo\nEntire home/apt\n2\nNaN\n1 bath\nNaN\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"S...\n$169.00\n3\n1125\n3\n3\n1125\n1125\n3.0\n1125.0\nNaN\nt\n7\n14\n30\n276\n2023-09-11\n166\n17\n0\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n4.52\n540050030025, TA-095-127-9616-01\nt\n2\n2\n0\n0\n1.50\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5369\n974058647912716646\nhttps://www.airbnb.com/rooms/974058647912716646\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Lihue · ★New · 1 bedroom · 1 be...\nRevel in the magical view from this East Side ...\nGreat Central East Side Island Location, 3 mil...\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n65379678\nhttps://www.airbnb.com/users/show/65379678\nJennifer\n2016-04-01\nKapaʻa, HI\nExcited to meet you ! I am a Kaua'i enthusias...\nwithin an hour\n100%\n100%\nt\nhttps://a0.muscache.com/im/pictures/user/6f8eb...\nhttps://a0.muscache.com/im/pictures/user/6f8eb...\nNawiliwili\n9.0\n14.0\n['email', 'phone']\nt\nt\nLihue, Hawaii, United States\nLihue\nKauai\n22.009110\n-159.338350\nEntire rental unit\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Refrigerator\", \"Hair dryer\", \"Hot water\", \"C...\n$185.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n12\n25\n52\n228\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n370030150166, TA-159-050-5472-00\nf\n9\n7\n2\n0\nNaN\n\n\n5370\n974181213482059205\nhttps://www.airbnb.com/rooms/974181213482059205\n20230910055919\n2023-09-10\ncity scrape\nCamper/RV in Anahola · ★New · 1 bedroom · 1 be...\n⭐️⭐️⭐️⭐️⭐️&lt;br /&gt;All Star Host Since 2017 &lt;br /...\nKOA Campers Kauai&lt;br /&gt;Is located near two cam...\nhttps://a0.muscache.com/pictures/hosting/Hosti...\n485051667\nhttps://www.airbnb.com/users/show/485051667\nKoa\n2022-10-25\nNaN\nNaN\nwithin an hour\n100%\n100%\nf\nhttps://a0.muscache.com/im/pictures/user/User-...\nhttps://a0.muscache.com/im/pictures/user/User-...\nNaN\n2.0\n4.0\n['phone']\nt\nt\nAnahola, Hawaii, United States\nKapaa-Wailua\nKauai\n22.157706\n-159.317440\nCamper/RV\nEntire home/apt\n2\nNaN\n1 bath\n1.0\n1.0\n[\"Outdoor dining area\", \"First aid kit\", \"Beac...\n$153.00\n4\n9\n4\n4\n1125\n1125\n4.0\n1125.0\nNaN\nt\n15\n45\n75\n255\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n360020170000, TA-137-306-2656-01\nt\n2\n2\n0\n0\nNaN\n\n\n5371\n975125508230452492\nhttps://www.airbnb.com/rooms/975125508230452492\n20230910055919\n2023-09-11\ncity scrape\nCabin in Kapaʻa · ★New · 2 bedrooms · 2 beds ·...\nSuper rare find! A perfect 2 in 1 experience l...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n239397319\nhttps://www.airbnb.com/users/show/239397319\nNick\n2019-01-27\nKapaʻa, HI\nAfter exploring Kauai and the Big Island via O...\nwithin an hour\n100%\n100%\nt\nhttps://a0.muscache.com/im/pictures/user/60760...\nhttps://a0.muscache.com/im/pictures/user/60760...\nNaN\n10.0\n25.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.053770\n-159.328740\nEntire cabin\nEntire home/apt\n5\nNaN\nHalf-bath\n2.0\n2.0\n[\"First aid kit\", \"BBQ grill\", \"Valley view\", ...\n$214.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n23\n53\n83\n355\n2023-09-11\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n430020100084, TA-117-707-1616-02\nt\n9\n9\n0\n0\nNaN\n\n\n5372\n975283100809274999\nhttps://www.airbnb.com/rooms/975283100809274999\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Kapaʻa · ★New · 2 bedrooms · 4 ...\nThis spacious two-bedroom resort suite measure...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n371942068\nhttps://www.airbnb.com/users/show/371942068\nJoy\n2020-10-14\nNaN\nHi, I'm Joy! I'm excited for you to check out ...\nwithin a few hours\n100%\n44%\nt\nhttps://a0.muscache.com/im/pictures/user/d2890...\nhttps://a0.muscache.com/im/pictures/user/d2890...\nOrmond Shores\n346.0\n583.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.051842\n-159.334251\nEntire rental unit\nEntire home/apt\n6\nNaN\n2 baths\n2.0\n4.0\n[\"Refrigerator\", \"First aid kit\", \"Carbon mono...\n$399.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n29\n59\n89\n364\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nExempt\nf\n97\n85\n12\n0\nNaN\n\n\n5373\n975288623054648385\nhttps://www.airbnb.com/rooms/975288623054648385\n20230910055919\n2023-09-10\ncity scrape\nRental unit in Kapaʻa · ★New · 1 bedroom · 2 b...\nThis spacious one-bedroom resort suite measure...\nNaN\nhttps://a0.muscache.com/pictures/miso/Hosting-...\n371942068\nhttps://www.airbnb.com/users/show/371942068\nJoy\n2020-10-14\nNaN\nHi, I'm Joy! I'm excited for you to check out ...\nwithin a few hours\n100%\n44%\nt\nhttps://a0.muscache.com/im/pictures/user/d2890...\nhttps://a0.muscache.com/im/pictures/user/d2890...\nOrmond Shores\n346.0\n583.0\n['email', 'phone']\nt\nt\nNaN\nKapaa-Wailua\nKauai\n22.051694\n-159.332566\nEntire rental unit\nEntire home/apt\n4\nNaN\n1 bath\n1.0\n2.0\n[\"First aid kit\", \"Carbon monoxide alarm\", \"Fi...\n$299.00\n2\n365\n2\n2\n365\n365\n2.0\n365.0\nNaN\nt\n0\n19\n49\n324\n2023-09-10\n0\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nExempt\nf\n97\n85\n12\n0\nNaN\n\n\n\n\n5374 rows × 75 columns\n\n\n\nTo clean up the data, we identify which columns may be useful for the analysis and drop the rest. Numerical value columns that provide information about the property, such as review numbers, number of people the property can accommodate, and the different review ratings are preserved to the best extent possible to be used in our machine learning model later.\n\n# Subset data columns\ncolumns= [\"id\",\"host_id\", \"host_since\", \"host_response_rate\", \"host_acceptance_rate\", \"host_is_superhost\", \"host_listings_count\", \"host_identity_verified\", \"neighbourhood_cleansed\",\n                                                       \"neighbourhood_group_cleansed\", \"latitude\", \"longitude\", \"property_type\",\n                                                       \"room_type\", \"accommodates\", \"bathrooms_text\", \"bedrooms\", \"beds\", \"price\",\n                                                      \"minimum_nights\", \"number_of_reviews\", \"first_review\", \"last_review\",\n                                                       \"review_scores_rating\", \"review_scores_accuracy\", \"review_scores_cleanliness\", \"review_scores_checkin\", \"review_scores_communication\", \"review_scores_location\",\n                                                       \"reviews_per_month\"]\nlistings_kauai_clean = listings_kauai[columns]\nlistings_kauai_clean.head()\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_since\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_listings_count\nhost_identity_verified\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms_text\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\n0\n152645\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22042\n-159.47754\nEntire condo\nEntire home/apt\n2\n1 bath\n1.0\n1.0\n$110.00\n3\n206\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n1.40\n\n\n1\n153304\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22266\n-159.47804\nEntire condo\nEntire home/apt\n6\n2 baths\n2.0\n2.0\n$195.00\n3\n142\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n0.96\n\n\n2\n153397\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22097\n-159.47804\nEntire condo\nEntire home/apt\n8\n3 baths\n3.0\n4.0\n$285.00\n3\n20\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n0.15\n\n\n3\n162600\n756093\n2011-06-28\n99%\n96%\nt\n75.0\nt\nKapaa-Wailua\nKauai\n22.06174\n-159.32052\nEntire condo\nEntire home/apt\n6\n2.5 baths\n2.0\n3.0\n$588.00\n1\n20\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n0.19\n\n\n4\n13238\n51647\n2009-11-05\n100%\n100%\nf\n2.0\nf\nNorth Shore Kauai\nKauai\n22.21789\n-159.47184\nEntire condo\nEntire home/apt\n2\n1 bath\nNaN\n1.0\n$169.00\n3\n166\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n1.50\n\n\n\n\n\n\n\nOur price data is stored as a string. In order to analyze this value, we need to convert it to a float. The dollar sign $ and any commas , are removed.\n\n# Convert price from string to float        \n\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].str.strip(\"$\")\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].replace(',', '', regex=True)\nlistings_kauai_clean['price'] = listings_kauai_clean['price'].astype(float)\n    \nlistings_kauai_clean.head()\n\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].str.strip(\"$\")\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].replace(',', '', regex=True)\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/1115337202.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  listings_kauai_clean['price'] = listings_kauai_clean['price'].astype(float)\n\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_since\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_listings_count\nhost_identity_verified\nneighbourhood_cleansed\nneighbourhood_group_cleansed\nlatitude\nlongitude\nproperty_type\nroom_type\naccommodates\nbathrooms_text\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\n0\n152645\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22042\n-159.47754\nEntire condo\nEntire home/apt\n2\n1 bath\n1.0\n1.0\n110.0\n3\n206\n2011-08-11\n2023-08-13\n4.54\n4.68\n4.48\n4.83\n4.79\n4.73\n1.40\n\n\n1\n153304\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22266\n-159.47804\nEntire condo\nEntire home/apt\n6\n2 baths\n2.0\n2.0\n195.0\n3\n142\n2011-08-09\n2023-08-21\n4.64\n4.73\n4.44\n4.89\n4.92\n4.77\n0.96\n\n\n2\n153397\n710680\n2011-06-16\n100%\n100%\nf\n3.0\nf\nNorth Shore Kauai\nKauai\n22.22097\n-159.47804\nEntire condo\nEntire home/apt\n8\n3 baths\n3.0\n4.0\n285.0\n3\n20\n2012-09-10\n2022-10-30\n4.74\n4.75\n4.65\n4.84\n4.85\n4.74\n0.15\n\n\n3\n162600\n756093\n2011-06-28\n99%\n96%\nt\n75.0\nt\nKapaa-Wailua\nKauai\n22.06174\n-159.32052\nEntire condo\nEntire home/apt\n6\n2.5 baths\n2.0\n3.0\n588.0\n1\n20\n2014-12-27\n2023-04-01\n4.95\n4.95\n4.90\n4.95\n4.90\n5.00\n0.19\n\n\n4\n13238\n51647\n2009-11-05\n100%\n100%\nf\n2.0\nf\nNorth Shore Kauai\nKauai\n22.21789\n-159.47184\nEntire condo\nEntire home/apt\n2\n1 bath\nNaN\n1.0\n169.0\n3\n166\n2014-08-04\n2023-05-29\n4.48\n4.68\n4.30\n4.80\n4.77\n4.79\n1.50\n\n\n\n\n\n\n\nIn order to use our location data properly, we need to convert our dataframe into a geodataframe. We use the provided listings coordinates to convert it to a gpd.\n\n# Convert to gpd\nlistings_kauai_gpd = gpd.GeoDataFrame(\n    listings_kauai_clean,\n    geometry=gpd.points_from_xy(listings_kauai_clean[\"longitude\"], listings_kauai_clean[\"latitude\"]), # Note: Longitude has to come first!\ncrs=\"EPSG:4326\",\n)\n\n\n\n\nWe load in our calendar data, which includes the price per listing each of the 365 days from the webscraped date. For example, listing id 3002 will have prices from September 2023 to September 2024. We will use this data later to understand the cyclicality of prices. We will use the full dataset, rather than limiting it to the listings of Kauai, to understand Hawaii’s hospitality season better as a whole.\nAfterwards, we repeat the same steps of dropping unnecessary columns and converting our price string data into a float.\n\n# Calendar \ncalendar = pd.read_csv(\"./data/calendar_sep_23.csv.gz\") # key is \"listing_id\"; in listing is \"id\"\ncalendar.head() # 12,168,742 records\n\n\n\n\n\n\n\n\nlisting_id\ndate\navailable\nprice\nadjusted_price\nminimum_nights\nmaximum_nights\n\n\n\n\n0\n3002\n2023-09-11\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n1\n3002\n2023-09-12\nt\n$85.00\n$85.00\n4.0\n7.0\n\n\n2\n3002\n2023-09-13\nf\n$120.00\n$120.00\n4.0\n7.0\n\n\n3\n3002\n2023-09-14\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n4\n3002\n2023-09-15\nf\n$85.00\n$85.00\n4.0\n7.0\n\n\n\n\n\n\n\n\n# Drop unnecessary columns\ncalendar = calendar.drop(['adjusted_price', 'minimum_nights', 'maximum_nights', 'available'], axis=1)\n\n\n# Clean price data\ncalendar['price'] = calendar['price'].str.strip(\"$\")\ncalendar['price'] = calendar['price'].replace(',', '', regex=True)\ncalendar[\"price\"] = calendar.price.astype(float)\n\nFor visualization purposes, we then group the calendar data per date and find the median price for that day.\n\n# Calendar data, per day mean price\ncalendar_grp = calendar.groupby(\"date\", as_index=False)[['price']].median()\ncalendar_grp\n\n\n\n\n\n\n\n\ndate\nprice\n\n\n\n\n0\n2023-09-10\n259.0\n\n\n1\n2023-09-11\n249.0\n\n\n2\n2023-09-12\n249.0\n\n\n3\n2023-09-13\n249.0\n\n\n4\n2023-09-14\n249.0\n\n\n...\n...\n...\n\n\n361\n2024-09-05\n286.0\n\n\n362\n2024-09-06\n291.0\n\n\n363\n2024-09-07\n291.0\n\n\n364\n2024-09-08\n287.0\n\n\n365\n2024-09-09\n270.0\n\n\n\n\n366 rows × 2 columns\n\n\n\nIn order to use our calendar data, we need our calendar dates to be recognized as dates and not as strings. We reformat it appropriately.\n\n# Format date as date\nfrom datetime import datetime\n\ncalendar_grp['date'] = pd.to_datetime(calendar_grp['date'])\ncalendar_grp['date2'] = calendar_grp['date'].apply(lambda x: x.strftime(\"%Y-%m-%d\"))\n\n\ncalendar_grp = calendar_grp.drop(['date'], axis=1)\ncalendar_grp = calendar_grp.rename(columns={\"date2\": \"date\"})\ncalendar_grp.head()\n\n\n\n\n\n\n\n\nprice\ndate\n\n\n\n\n0\n259.0\n2023-09-10\n\n\n1\n249.0\n2023-09-11\n\n\n2\n249.0\n2023-09-12\n\n\n3\n249.0\n2023-09-13\n\n\n4\n249.0\n2023-09-14\n\n\n\n\n\n\n\n\n\n\n\nIn order to have a more robust analysis on what affects pricing per listing, we acquire nearby venue data via Foursquare’s API in order to note which venues are near each listing location.\nThe Foursquare documentation notes the order of returned venues depend on popularity and distance. We will assume then the returned venues are also those that tourists or users of Airbnb will also consider in whether they want that to be within a convenient distance.\n\nfrom time import sleep  # to create delays in API requests\n\nEach Airbnb listing coordinates are separated into a different dataframe for the API request.\n\n# Create separate lat and long list\n\nlist_api = listings_kauai_gpd[['id','latitude', 'longitude']]\n\nlist_gpd = gpd.GeoDataFrame(\n    list_api,\n    geometry=gpd.points_from_xy(list_api[\"longitude\"], list_api[\"latitude\"]),\n    crs= \"EPSG:4326\",\n)\n\nThe request requires one to provide the location information, a radius distance boundary, and a limit of the number of nearby venues to return. As the API request takes a very long time to run, the venue request is limited to a radius of 500 meters around the specified listing location and 3 venues.\nWe then create a dataframe to receive the information, which wil linclude the venue’s name, location coordinates, and its category (eg. a restaurant or a museum).\n\n# Foursquare API\n\ndef getNearbyVenues(names, latitudes, longitudes, radius=1000, limit=5):\n    headers = {\n        'Accept': 'application/json',\n        'Authorization': 'fsq37Wmf6OswRoeBR+tSgZ0pmkLmK2NjMD0T8lycAzMxAQU=' #API Key\n    }\n\n    URL = 'https://api.foursquare.com/v3/places/search?ll={},{}&radius={}&limit={}'\n\n    venues_list = []\n    for name, lat, lng in zip(names, latitudes, longitudes):\n\n        url = URL.format(lat, lng, radius, limit)\n        data = requests.get(url, headers=headers).json()\n        # print(data['results'][0]['categories'][0]['name'])\n        # process venues_list\n        for record in data['results']:\n            if record.get('categories'):\n                venues_list.append({\n                        'Listing': name,\n                        'Listing Latitude': lat,\n                        'Listing Longitude': lng,\n                        'Venue': record['name'],\n                        'Venue Latitude': record['geocodes']['main']['latitude'],\n                        'Venue Longitude': record['geocodes']['main']['longitude'],\n                        'Venue Category': record['categories'][0]['name'],\n                    })\n         \n    # create your dataframe\n    nearby_venues = pd.DataFrame(venues_list)\n\n    return(nearby_venues)\n\n\nkauai_venues = getNearbyVenues(names = list_api.id,\n                              latitudes = list_api.latitude,\n                              longitudes = list_api.longitude,\n                              radius = 500,\n                              limit = 3\n                        )\nkauai_venues.head()\n\n\n\n\n\n\n\n\nListing\nListing Latitude\nListing Longitude\nVenue\nVenue Latitude\nVenue Longitude\nVenue Category\n\n\n\n\n0\n152645\n22.220420\n-159.477540\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n1\n153304\n22.222660\n-159.478040\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n2\n153304\n22.222660\n-159.478040\nWyndham Bali Hai Villas\n22.224518\n-159.482362\nSwimming Pool\n\n\n3\n153397\n22.220970\n-159.478040\nO'Hara Construction & Design\n22.223965\n-159.476440\nConstruction\n\n\n4\n162600\n22.061740\n-159.320520\nCoconut's Fish Cafe\n22.062863\n-159.321463\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n14423\n975283100809274999\n22.051842\n-159.334251\nEathealthy Cafe\n22.052967\n-159.333542\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\n22.051842\n-159.334251\nNapali Brewing Co.\n22.052041\n-159.333768\nBrewery\n\n\n14425\n975288623054648385\n22.051694\n-159.332566\nKorean Bar-B-Q\n22.051846\n-159.333259\nBBQ Joint\n\n\n14426\n975288623054648385\n22.051694\n-159.332566\nEathealthy Cafe\n22.052967\n-159.333542\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\n22.051694\n-159.332566\nMema Thai Chinese Cuisine\n22.052505\n-159.333426\nThai Restaurant\n\n\n\n\n14428 rows × 7 columns\n\n\n\nDue to the inconsistency of number of venues returned and the limited number of request calls that can be made within time contraints, the venues data will be used for data exploration but will not be included in the machine learning model. The dataframe is cleaned appropriately.\n\n# Drop columns and rename column\n\ncolumns_to_drop = [1, 2, 4, 5]\nkauai_venues_clean = kauai_venues.drop(kauai_venues.columns[columns_to_drop], axis=1)\n\n\n\n\n\n\n\n\nListing\nVenue\nCategory\n\n\n\n\n0\n152645\nO'Hara Construction & Design\nConstruction\n\n\n1\n153304\nO'Hara Construction & Design\nConstruction\n\n\n2\n153304\nWyndham Bali Hai Villas\nSwimming Pool\n\n\n3\n153397\nO'Hara Construction & Design\nConstruction\n\n\n4\n162600\nCoconut's Fish Cafe\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n\n\n14423\n975283100809274999\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\nNapali Brewing Co.\nBrewery\n\n\n14425\n975288623054648385\nKorean Bar-B-Q\nBBQ Joint\n\n\n14426\n975288623054648385\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\nMema Thai Chinese Cuisine\nThai Restaurant\n\n\n\n\n14428 rows × 3 columns\n\n\n\n\nkauai_venues_clean = kauai_venues_clean.rename(columns={\"Venue Category\": \"Category\", \"Listing\":\"id\"})\nkauai_venues_clean\n\n\n\n\n\n\n\n\nid\nVenue\nCategory\n\n\n\n\n0\n152645\nO'Hara Construction & Design\nConstruction\n\n\n1\n153304\nO'Hara Construction & Design\nConstruction\n\n\n2\n153304\nWyndham Bali Hai Villas\nSwimming Pool\n\n\n3\n153397\nO'Hara Construction & Design\nConstruction\n\n\n4\n162600\nCoconut's Fish Cafe\nHawaiian Restaurant\n\n\n...\n...\n...\n...\n\n\n14423\n975283100809274999\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14424\n975283100809274999\nNapali Brewing Co.\nBrewery\n\n\n14425\n975288623054648385\nKorean Bar-B-Q\nBBQ Joint\n\n\n14426\n975288623054648385\nEathealthy Cafe\nVegan and Vegetarian Restaurant\n\n\n14427\n975288623054648385\nMema Thai Chinese Cuisine\nThai Restaurant\n\n\n\n\n14428 rows × 3 columns"
  },
  {
    "objectID": "analysis/final-project.html#price-prediction",
    "href": "analysis/final-project.html#price-prediction",
    "title": "Airbnb Pricing Exploration and Modelling - Kauai, Hawaii",
    "section": "3. Price Prediction",
    "text": "3. Price Prediction\nTo find a model that will predict the prices of listings, I create a machine learning model utilizing the previous dataset.\n\n3.1 Train a Random Forest on the data (listings + calendar)\n\n3.1.1 Preprocessing\nThe data is checked using functions such as looking at the statistical summary and counting the number of nas to figure what what preprocessing is needed. Afterwards a pipeline is created to handle numerical value columns and categorical value columns.\n\n# look at summary statistics\nlistings_kauai_gpd.describe()\n\n\n\n\n\n\n\n\nid\nhost_id\nhost_listings_count\nlatitude\nlongitude\naccommodates\nbedrooms\nbeds\nprice\nminimum_nights\nnumber_of_reviews\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\n\n\n\n\ncount\n5.374000e+03\n5.374000e+03\n5374.000000\n5374.000000\n5374.000000\n5374.000000\n4767.000000\n5349.000000\n5374.000000\n5374.000000\n5374.000000\n3935.000000\n3933.000000\n3933.000000\n3933.000000\n3933.000000\n3933.000000\n3935.000000\n\n\nmean\n3.858371e+17\n1.967164e+08\n318.085225\n22.063652\n-159.430920\n5.147376\n1.983218\n2.710600\n455.457760\n10.416263\n25.351321\n4.782755\n4.795372\n4.796242\n4.844439\n4.815675\n4.885477\n1.050038\n\n\nstd\n3.983683e+17\n1.758776e+08\n602.599661\n0.145281\n0.067343\n2.514550\n1.051412\n1.522949\n873.957766\n36.664834\n50.890054\n0.349420\n0.373735\n0.316880\n0.313340\n0.357005\n0.224364\n1.109448\n\n\nmin\n1.323800e+04\n7.984000e+03\n1.000000\n21.868660\n-159.714620\n1.000000\n1.000000\n1.000000\n0.000000\n1.000000\n0.000000\n0.000000\n1.000000\n1.000000\n1.000000\n1.000000\n1.000000\n0.010000\n\n\n25%\n3.771922e+07\n3.907322e+07\n8.000000\n21.883481\n-159.478199\n4.000000\n1.000000\n2.000000\n225.000000\n1.000000\n0.000000\n4.710000\n4.750000\n4.730000\n4.820000\n4.780000\n4.860000\n0.270000\n\n\n50%\n5.413300e+07\n1.118173e+08\n73.000000\n22.055690\n-159.459800\n4.000000\n2.000000\n2.000000\n303.000000\n2.000000\n5.000000\n4.890000\n4.910000\n4.890000\n4.950000\n4.940000\n4.950000\n0.640000\n\n\n75%\n7.977253e+17\n3.896978e+08\n303.000000\n22.220300\n-159.347262\n6.000000\n2.000000\n3.000000\n466.750000\n3.000000\n25.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n1.460000\n\n\nmax\n9.770428e+17\n5.350458e+08\n2766.000000\n22.229090\n-159.302780\n16.000000\n11.000000\n18.000000\n25000.000000\n185.000000\n645.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n5.000000\n9.070000\n\n\n\n\n\n\n\n\n# look at number of listings\nlen(listings_kauai_gpd)\n\n5374\n\n\n\n# check if we need to reformat data\ndata_types = listings_kauai_gpd.dtypes\ndata_types\n\nid                                 int64\nhost_id                            int64\nhost_since                        object\nhost_response_rate                object\nhost_acceptance_rate              object\nhost_is_superhost                 object\nhost_listings_count              float64\nhost_identity_verified            object\nneighbourhood_cleansed            object\nneighbourhood_group_cleansed      object\nlatitude                         float64\nlongitude                        float64\nproperty_type                     object\nroom_type                         object\naccommodates                       int64\nbathrooms_text                    object\nbedrooms                         float64\nbeds                             float64\nprice                            float64\nminimum_nights                     int64\nnumber_of_reviews                  int64\nfirst_review                      object\nlast_review                       object\nreview_scores_rating             float64\nreview_scores_accuracy           float64\nreview_scores_cleanliness        float64\nreview_scores_checkin            float64\nreview_scores_communication      float64\nreview_scores_location           float64\nreviews_per_month                float64\ngeometry                        geometry\ndtype: object\n\n\n\n# look at nas\nnan_count = listings_kauai_gpd.isna().sum()\nnan_count\n\nid                                 0\nhost_id                            0\nhost_since                         0\nhost_response_rate               172\nhost_acceptance_rate             108\nhost_is_superhost                  0\nhost_listings_count                0\nhost_identity_verified             0\nneighbourhood_cleansed             0\nneighbourhood_group_cleansed       0\nlatitude                           0\nlongitude                          0\nproperty_type                      0\nroom_type                          0\naccommodates                       0\nbathrooms_text                     0\nbedrooms                           0\nbeds                               0\nprice                              0\nminimum_nights                     0\nnumber_of_reviews                  0\nfirst_review                    1437\nlast_review                     1437\nreview_scores_rating               0\nreview_scores_accuracy             0\nreview_scores_cleanliness          0\nreview_scores_checkin              0\nreview_scores_communication        0\nreview_scores_location             0\nreviews_per_month                  0\ngeometry                           0\ndtype: int64\n\n\n\n# trim data where prices are $50 - $10,000\nvalid = (listings_kauai_gpd['price'] &gt; 20) & (listings_kauai_gpd['price'] &lt; 10000)\ntrim = listings_kauai_gpd.loc[valid]\n\n\n# drop cols and nas\ncols = [\"price\", \"geometry\",\n    \"host_response_rate\",\n    \"host_acceptance_rate\",\n    \"host_listings_count\",\n    \"neighbourhood_cleansed\",\n    \"bathrooms_text\",\n    \"bedrooms\",\n    \"accommodates\",\n    \"beds\",\n    \"minimum_nights\",\n    \"number_of_reviews\",\n    \"review_scores_rating\",\n    \"review_scores_accuracy\",\n    \"review_scores_cleanliness\",\n    \"review_scores_checkin\",\n    \"review_scores_communication\",\n    \"review_scores_location\",\n    \"reviews_per_month\",\n    \"room_type\", \"property_type\", \"host_is_superhost\", \"host_identity_verified\"]\n\ntrim = trim[cols].dropna()\nlen(trim)\n\n5138\n\n\n\n# change numerical column values to float\n\n# trim[['bathrooms_text']] = trim[['bathrooms_text']].astype(float)\ntrim['bathrooms'] = trim['bathrooms_text'].str.extract('(\\d+)')\ntrim = trim.drop('bathrooms_text', axis=1)\n\n\n# remove % and convert to float\ntrim['host_response_rate'] = pd.to_numeric(trim['host_response_rate'].str.replace('%', ''), errors='coerce') / 100.0\ntrim['host_acceptance_rate'] = pd.to_numeric(trim['host_acceptance_rate'].str.replace('%', ''), errors='coerce') / 100.0\n\nAttributeError: Can only use .str accessor with string values!\n\n\n\n# drop nas for column superhost - this is a categorical column\ntrim = trim.dropna(subset=['host_is_superhost'])\n\n# replace nas with median for the numeric columns\ntrim = trim.fillna(trim.median())\n\n/var/folders/v1/v3tsqscs7511bcxbwjb1fz3h0000gn/T/ipykernel_11207/2743277231.py:5: FutureWarning: The default value of numeric_only in GeoDataFrame.median is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n  trim = trim.fillna(trim.median())\n\n\nThe data has been cleaned. Now the model needs to be set up. Pipelines are set, and the numerical and categorical data are separated for the model to process.\n\n#Set up pipeline\n\n#Preprocessing\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler, OneHotEncoder\nscaler = StandardScaler()\n\nfrom sklearn.compose import ColumnTransformer\n\n# Models\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Model selection\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n\n\n# Numerical columns\nnum_cols =  [\n    \"host_response_rate\",\n    \"host_acceptance_rate\",\n    \"host_listings_count\",\n    \"bathrooms\",\n    \"bedrooms\",\n    \"accommodates\",\n    \"beds\",\n    \"minimum_nights\",\n    \"number_of_reviews\",\n    \"review_scores_rating\",\n    \"review_scores_accuracy\",\n    \"review_scores_cleanliness\",\n    \"review_scores_checkin\",\n    \"review_scores_communication\",\n    \"review_scores_location\",\n    \"reviews_per_month\",\n]\n\n# Categorical columns\ncat_cols = [\"neighbourhood_cleansed\", \"room_type\", \"property_type\", \"host_is_superhost\", \"host_identity_verified\"]\n\n\n# Initialize the OHE transformer\nohe = OneHotEncoder()\n\n\n# Transform numerical and categorical columns separately\ntransformer = ColumnTransformer(\n    transformers=[\n        (\"num\", StandardScaler(), num_cols),\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), cat_cols),\n    ]\n)\n\n\n# Initialize the pipeline\n## NOTE: only using 5 estimators to run in a reasonable time\npipe = make_pipeline(\n    transformer, RandomForestRegressor(n_estimators=5, \n                                       random_state=42)\n)\n\n\nmodel = pipe['randomforestregressor']\n\n\n\n3.1.2 Training\nWith the model set up, we now split the dataset 70/30 - 70% is used to train the model, while 30% is used to test the model. The model’s purpose is to predict the log of the airbnb listing price.\nA GridSearchCV is used to perform a cross validation of the model. We use a Random Forest Regressor with optimized 2 hyperparameters to fit our model better. The model is then evaluated with the R-squared score.\n\n# Split training and test data 70/30\ntrain_set, test_set = train_test_split(trim, test_size=0.3, random_state=42)\n\n\n# Create the target labels: log of sale price\ny_train = np.log(train_set[\"price\"])\ny_test = np.log(test_set[\"price\"])\n\n\n# Create grid of parameters to search\npipe.named_steps\nmodel_step = \"randomforestregressor\"\nparam_grid = {\n    f\"{model_step}__n_estimators\": [5, 10, 15, 20], # Reducing as run time is very long\n    f\"{model_step}__max_depth\": [2, 3, 5, 7],\n}\n\n\n# Create the grid and use 3-fold CV\ngrid = GridSearchCV(pipe, param_grid, cv=3, verbose=1)\n\n\n# Run the search\ngrid.fit(train_set, y_train)\n\nFitting 3 folds for each of 16 candidates, totalling 48 fits\n\n\nGridSearchCV(cv=3,\n             estimator=Pipeline(steps=[('columntransformer',\n                                        ColumnTransformer(transformers=[('num',\n                                                                         StandardScaler(),\n                                                                         ['host_response_rate',\n                                                                          'host_acceptance_rate',\n                                                                          'host_listings_count',\n                                                                          'bathrooms',\n                                                                          'bedrooms',\n                                                                          'accommodates',\n                                                                          'beds',\n                                                                          'minimum_nights',\n                                                                          'number_of_reviews',\n                                                                          'review_scores_rating',\n                                                                          'review_scores_accuracy',\n                                                                          'review_scores_cleanliness',\n                                                                          'rev...\n                                                                        ('cat',\n                                                                         OneHotEncoder(handle_unknown='ignore'),\n                                                                         ['neighbourhood_cleansed',\n                                                                          'room_type',\n                                                                          'property_type',\n                                                                          'host_is_superhost',\n                                                                          'host_identity_verified'])])),\n                                       ('randomforestregressor',\n                                        RandomForestRegressor(n_estimators=5,\n                                                              random_state=42))]),\n             param_grid={'randomforestregressor__max_depth': [2, 3, 5, 7],\n                         'randomforestregressor__n_estimators': [5, 10, 15,\n                                                                 20]},\n             verbose=1)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.GridSearchCVGridSearchCV(cv=3,\n             estimator=Pipeline(steps=[('columntransformer',\n                                        ColumnTransformer(transformers=[('num',\n                                                                         StandardScaler(),\n                                                                         ['host_response_rate',\n                                                                          'host_acceptance_rate',\n                                                                          'host_listings_count',\n                                                                          'bathrooms',\n                                                                          'bedrooms',\n                                                                          'accommodates',\n                                                                          'beds',\n                                                                          'minimum_nights',\n                                                                          'number_of_reviews',\n                                                                          'review_scores_rating',\n                                                                          'review_scores_accuracy',\n                                                                          'review_scores_cleanliness',\n                                                                          'rev...\n                                                                        ('cat',\n                                                                         OneHotEncoder(handle_unknown='ignore'),\n                                                                         ['neighbourhood_cleansed',\n                                                                          'room_type',\n                                                                          'property_type',\n                                                                          'host_is_superhost',\n                                                                          'host_identity_verified'])])),\n                                       ('randomforestregressor',\n                                        RandomForestRegressor(n_estimators=5,\n                                                              random_state=42))]),\n             param_grid={'randomforestregressor__max_depth': [2, 3, 5, 7],\n                         'randomforestregressor__n_estimators': [5, 10, 15,\n                                                                 20]},\n             verbose=1)estimator: PipelinePipeline(steps=[('columntransformer',\n                 ColumnTransformer(transformers=[('num', StandardScaler(),\n                                                  ['host_response_rate',\n                                                   'host_acceptance_rate',\n                                                   'host_listings_count',\n                                                   'bathrooms', 'bedrooms',\n                                                   'accommodates', 'beds',\n                                                   'minimum_nights',\n                                                   'number_of_reviews',\n                                                   'review_scores_rating',\n                                                   'review_scores_accuracy',\n                                                   'review_scores_cleanliness',\n                                                   'review_scores_checkin',\n                                                   'review_scores_communication',\n                                                   'review_scores_location',\n                                                   'reviews_per_month']),\n                                                 ('cat',\n                                                  OneHotEncoder(handle_unknown='ignore'),\n                                                  ['neighbourhood_cleansed',\n                                                   'room_type', 'property_type',\n                                                   'host_is_superhost',\n                                                   'host_identity_verified'])])),\n                ('randomforestregressor',\n                 RandomForestRegressor(n_estimators=5, random_state=42))])columntransformer: ColumnTransformerColumnTransformer(transformers=[('num', StandardScaler(),\n                                 ['host_response_rate', 'host_acceptance_rate',\n                                  'host_listings_count', 'bathrooms',\n                                  'bedrooms', 'accommodates', 'beds',\n                                  'minimum_nights', 'number_of_reviews',\n                                  'review_scores_rating',\n                                  'review_scores_accuracy',\n                                  'review_scores_cleanliness',\n                                  'review_scores_checkin',\n                                  'review_scores_communication',\n                                  'review_scores_location',\n                                  'reviews_per_month']),\n                                ('cat', OneHotEncoder(handle_unknown='ignore'),\n                                 ['neighbourhood_cleansed', 'room_type',\n                                  'property_type', 'host_is_superhost',\n                                  'host_identity_verified'])])num['host_response_rate', 'host_acceptance_rate', 'host_listings_count', 'bathrooms', 'bedrooms', 'accommodates', 'beds', 'minimum_nights', 'number_of_reviews', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'reviews_per_month']StandardScalerStandardScaler()cat['neighbourhood_cleansed', 'room_type', 'property_type', 'host_is_superhost', 'host_identity_verified']OneHotEncoderOneHotEncoder(handle_unknown='ignore')RandomForestRegressorRandomForestRegressor(n_estimators=5, random_state=42)\n\n\n\n# The best hyper parameters\ngrid.best_params_\n\n{'randomforestregressor__max_depth': 7,\n 'randomforestregressor__n_estimators': 20}\n\n\n\n# Random forest model pipeline with optimized depth and estimators\nforest_pipe = make_pipeline(\n    transformer, \n    RandomForestRegressor(n_estimators=20, max_depth=7, random_state=42), \n)\n\n\n# Run the k-fold cross validation\nscores = cross_val_score(\n    forest_pipe,\n    train_set,\n    y_train,\n    cv=3,\n)\n\n\n# Report\nprint(\"R^2 scores = \", scores)\nprint(\"Scores mean = \", scores.mean())\nprint(\"Score std dev = \", scores.std())\n\nR^2 scores =  [0.65066977 0.60736221 0.61580208]\nScores mean =  0.6246113562692326\nScore std dev =  0.01874546441942987\n\n\n\n# Fit a random forest\nprint(\"Random forest\")\nforest_pipe.fit(train_set, y_train)\n\n# Print the training score\ntraining_score = forest_pipe.score(train_set, y_train)\nprint(f\"Training Score = {training_score}\")\n\n# Print the test score\ntest_score = forest_pipe.score(test_set, y_test)\nprint(f\"Test Score = {test_score}\")\n\nRandom forest\nTraining Score = 0.7024855326116177\nTest Score = 0.6788891721934799\n\n\nThe R squared score of 0.67 indicates the model explains the variability in the pricing in an acceptrable range.\n\n\n\n3.2 Calculate the percent error of model predictions\nTo evaluate the percent error of model predictions per listing, we create two column to append into our listing dataset. The first column includes the predicted price by the model, and the second column includes the percent error of the predictions compared to the actual price.\n\n# Create dataset of test set\nX = trim.loc[test_set.index]\n\n# Make the predictions\nlog_predictions = forest_pipe.predict(test_set)\n\n# Convert the predicted test values from log\nX['prediction'] = np.exp(log_predictions)\n\n\n# Calculate percent error\n\nX[\"pct_error\"] = ((X[\"prediction\"]-(X[\"price\"]))/X[\"price\"])*100\nX.head()\n\n\n\n\n\n\n\n\nprice\ngeometry\nhost_response_rate\nhost_acceptance_rate\nhost_listings_count\nneighbourhood_cleansed\nbedrooms\naccommodates\nbeds\nminimum_nights\nnumber_of_reviews\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreviews_per_month\nroom_type\nproperty_type\nhost_is_superhost\nhost_identity_verified\nbathrooms\nprediction\npct_error\n\n\n\n\n895\n975.0\nPOINT (-159.30537 22.14641)\n1.00\n0.99\n73.0\nKapaa-Wailua\n5.0\n14\n8.0\n5\n7\n3.86\n4.29\n4.86\n4.57\n4.29\n4.43\n0.12\nEntire home/apt\nEntire home\nf\nt\n5\n1177.225162\n20.741042\n\n\n1043\n477.0\nPOINT (-159.32060 22.06245)\n0.94\n0.99\n168.0\nKapaa-Wailua\n2.0\n6\n3.0\n3\n10\n5.00\n5.00\n5.00\n4.90\n4.80\n4.90\n0.18\nEntire home/apt\nEntire condo\nf\nt\n3\n444.374645\n-6.839697\n\n\n4194\n240.0\nPOINT (-159.48115 22.22414)\n0.95\n0.15\n190.0\nNorth Shore Kauai\n2.0\n6\n3.0\n2\n1\n5.00\n5.00\n5.00\n5.00\n5.00\n5.00\n1.00\nEntire home/apt\nEntire rental unit\nf\nt\n2\n252.047241\n5.019684\n\n\n853\n255.0\nPOINT (-159.49446 22.22018)\n0.83\n1.00\n2.0\nNorth Shore Kauai\n2.0\n4\n2.0\n3\n74\n4.73\n4.76\n4.57\n4.88\n4.82\n4.88\n1.20\nEntire home/apt\nEntire condo\nf\nf\n1\n237.130747\n-7.007550\n\n\n2167\n383.0\nPOINT (-159.46511 21.87851)\n0.98\n0.99\n303.0\nKoloa-Poipu\n1.0\n4\n2.0\n1\n2\n5.00\n5.00\n5.00\n4.50\n5.00\n5.00\n0.09\nEntire home/apt\nEntire home/apt\nf\nt\n2\n392.422861\n2.460277"
  }
]